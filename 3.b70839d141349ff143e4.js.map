{"version":3,"sources":["webpack:///./src/lib/lovely-chart/utils.js","webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/hooks/usePrevForAnimation.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/hooks/useCurrentOrPrev.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumb.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionMenu.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useEmojiTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/UserExtra.tsx","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/Statistics.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Errors.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["getMaxMin","array","length","max","min","i","value","mergeArrays","arrays","concat","apply","sumArrays","sums","n","l","j","proxyMerge","obj1","obj2","Proxy","get","obj","prop","undefined","throttle","fn","ms","shouldRunFirst","isPending","args","interval","_args","window","setInterval","clearInterval","throttleWithRaf","waiting","requestAnimationFrame","debounce","shouldRunLast","waitingTimeout","clearTimeout","setTimeout","addEventListener","e","state","chatId","id","threadId","messageListType","type","getDispatch","openChat","noPushState","addReducer","global","actions","payload","currentMessageList","selectCurrentMessageList","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","history","pushState","updateCurrentMessageList","isChatInfoShown","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","avatarOwnerId","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","newGlobal","getGlobal","lastMessageId","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","focusMessage","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","management","byChatId","isActive","isStatisticsShown","IS_MOBILE_SCREEN","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","message","splice","push","error","getReadableErrorText","newErrors","errors","existingErrorIndex","err","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","cb","runThrottledForLoadTopChats","runDebouncedForFetchFullChat","runDebouncedForFetchOnlines","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","map","Number","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","showNotification","preloadedChatIds","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","IS_TOUCH_ENV","loadPinnedMessages","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","createChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","deleteChatFolder","unreadCount","url","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","userId","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","uploadProgressCallbacks","Map","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","firstMessageId","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","setReplyingToId","clearWebPagePreview","selectReplyingToId","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","v","a","indexOf","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","draftsByChatId","acc","lastReadInboxMessageId","newCurrentChatId","currentMessageListInfo","threadsById","Array","prototype","replaceUsers","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","lastRequestedAt","topPeers","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","button","sendBotCommand","command","openTelegramLink","open","data","alert","isError","showError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","settings","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","isShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isLoading","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","update","selectIsChatListed","loadTopChats","isNotJoined","listId","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","selectIsViewportNewest","addViewportId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","twoFaSettings","memo","name","label","checked","disabled","onChange","onCheck","handleChange","useCallback","event","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","theme","animationLevel","byKey","globalSearchChatId","searchDate","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","openTipsChat","setGlobalSearchDate","setSettingOption","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","isNewThemeDark","customBackground","DARK_THEME_BG_COLOR","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","lang","useLang","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_INFO","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","SearchInput","inputId","focused","placeholder","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","connectionState","Spinner","resolverFn","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","transitionRef","activeTab","setActiveTab","useState","useEffect","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","Right","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","onSwitchTab","Transition","ref","activeKey","renderCount","LeftSearchAsync","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactListAsync","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","SettingsAsync","NewChatAsync","NewChat","ArchivedChatsAsync","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","captureEscKeyListener","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","removeEventListener","usePrevForAnimation","duration","prev","usePrevious","timeoutRef","isCurrentPresent","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","useCurrentOrPrev","shouldSkipUndefined","shouldForceCurrent","HeaderMenuContainerAsync","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","fluid","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","useFlag","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","senderName","getSenderTitle","noUi","closeAudioPlayer","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioChatId","audioMessageId","audioMessage","originChat","messagesCount","pinnedIds","isSelectModeActive","chatTitleLength","getChatTitle","originChatId","isChatWithBot","selectIsChatWithBot","pinnedMessageIds","firstPinnedMessage","canUnpin","pinnedMessageId","selectForwardedSender","topMessageTitle","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","newIndex","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","isAlbum","messageOrAlbum","groupMessages","firstUnreadId","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDatetime","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useStickyDates","isScrolled","markIsScrolled","runDebounced","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","isFabFrozen","MessageScroll","containerHeight","listItemElementsRef","focusingId","anchorIdRef","anchorTopRef","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","updateFabVisibility","scrollHeight","scrollBottom","observe","observeIntersection","freeze","freezeForLoadMore","unfreeze","unfreezeForLoadMore","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","target","resetScroll","dataset","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","preservedItemElements","element","teactFastList","data-is-active","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","calculateMediaDimensions","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","REM","getMaxWidth","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainerAsync","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","senderTitle","MessageMeta","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumb","fullMediaData","useBlur","LAYERS_TRANSITION_DURATION","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","Video","shouldAutoPlay","videoRef","canPlayInline","canMessagePlayVideoInline","isPlayAllowed","setIsPlayAllowed","previewMediaData","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","useVideoCleanup","videoClassName","videoStyle","shouldRenderInlineVideo","shouldRenderHqPreview","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","hasDocument","siteName","displayUrl","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrapedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","toString","stopPlaying","capturePlaying","onRelease","paused","ROUND_VIDEO_DIMENSIONS","poster","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","formatInteger","renderLabel","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","isLastInList","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","avatarPeer","senderPeer","adminTitle","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","fromMessageId","calculatedWidth","extraPadding","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","showCommentsButton","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","runThrottledOnTickEnd","throttleWithTickEnd","selectCurrentMessageIds","restrictionReason","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","getCanPostInChat","selectFirstUnreadId","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","bottomOffset","markMessageListRead","setScrollOffset","scrollOffsetRef","selectScrollOffset","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","freezeForMedia","unfreezeForMedia","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","IS_IOS","webkitOverflowScrolling","clientHeight","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","isAtBottom","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isResized","unreadDivider","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","isPrivate","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","shouldRenderUnreadDivider","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusLastMessage","messsageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","startsWith","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","formattedText","currentThreadId","DeleteMessageModalAsync","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenuAsync","AttachMenu","SymbolMenuAsync","SymbolMenu","MentionMenuAsync","MentionMenu","CustomSendMenuAsync","CustomSend","EmojiTooltipAsync","EmojiTooltip","BotKeyboardMenuAsync","BotKeyboardMenu","forwardMessageIds","replyingToId","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModalAsync","AttachmentModal","PollModalAsync","PollModal","DropAreaAsync","DropArea","RE_LINK","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","webPageWithoutPhoto","messageStub","CalendarModalAsync","CalendarModal","PaymentModalAsync","PaymentModal","ReceiptModalAsync","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionMenuOpen","mentionFilter","closeMentionMenu","insertMention","mentionFilteredMembers","useMentionMenu","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useEmojiTooltip","canSendStickers","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","execCommand","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","tagName","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","preventDefault","useClipboardPaste","handleFileSelect","files","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","Portal","containerId","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onSend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSupressFocus","onUpdate","onSupressedFocus","formatVoiceRecordDuration","onStickerSelect","onPollCreate","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","selectedAt","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearchAsync","MobileSearch","MessageSelectToolbarAsync","MessageSelectToolbar","UnpinAllMessagesModalAsync","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBackgroundBlurred","isCustomBackgroundColor","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","isMobileSearchActive","loadUser","setDropAreaState","isFabShown","setIsFabShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","renderingThreadId","renderingMessageListType","renderingCanPost","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_ENABLED","messagingDisabledClassName","onDragEnter","ANIMATION_LEVEL_MAX","shouldCleanup","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStatistics","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","backButtonRef","handleMessageSearchQueryChange","handleJumpToDate","valueOf","handleStickerSearchQueryChange","handleGifSearchQueryChange","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","Statistics","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","isPastMode","submitButtonLabel","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","forceShowSelf","loadFullUser","formattedNumber","canInviteUsers","isUserRightBanned","getHasAdminRight","getChatDescription","getChatLink","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","tabType","noProfileInfo","searchMessages","getSortedUserIds","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","useProfileViewportIds","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","profileId","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","renderingFor","ListItem","teactOrderKey","InfiniteScroll","itemSelector","preloadBackwards","isDisabled","noFastList","onLoadMore","avatarSize","renderProfileInfo","shouldRestoreHeight","onStart","onStop","RightSearchAsync","RightSearch","ManagementAsync","Management","StatisticsAsync","StickerSearchAsync","GifSearchAsync","PollResultsAsync","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","toggleStatistics","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","NotificationsAsync","ErrorsAsync","Errors","ForwardPickerAsync","ForwardPicker","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasErrors","middleColumnTransitionClassNames","rightColumnTransitionClassNames","stopEvent","useBackgroundMode","initialUnread","selectCountNotMutedUnread","newUnread","onDrop","onDragOver","initApi"],"mappings":"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","file":"3.b70839d141349ff143e4.js","sourcesContent":["// https://jsperf.com/finding-maximum-element-in-an-array\nexport function getMaxMin(array) {\n  const length = array.length;\n  let max = array[0];\n  let min = array[0];\n\n  for (let i = 0; i < length; i++) {\n    const value = array[i];\n\n    if (value > max) {\n      max = value;\n    } else if (value < min) {\n      min = value;\n    }\n  }\n\n  return { max, min };\n}\n\n// https://jsperf.com/multi-array-concat/24\nexport function mergeArrays(arrays) {\n  return [].concat.apply([], arrays);\n}\n\nexport function sumArrays(arrays) {\n  const sums = [];\n  const n = arrays.length;\n\n  for (let i = 0, l = arrays[0].length; i < l; i++) {\n    sums[i] = 0;\n\n    for (let j = 0; j < n; j++) {\n      sums[i] += arrays[j][i];\n    }\n  }\n\n  return sums;\n}\n\nexport function proxyMerge(obj1, obj2) {\n  return new Proxy({}, {\n    get: (obj, prop) => {\n      if (obj[prop] !== undefined) {\n        return obj[prop];\n      } else if (obj2[prop] !== undefined) {\n        return obj2[prop];\n      } else {\n        return obj1[prop];\n      }\n    },\n  });\n}\n\nexport function throttle(\n  fn,\n  ms,\n  shouldRunFirst = true,\n) {\n  let interval = null;\n  let isPending;\n  let args;\n\n  return (..._args) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }\n\n      interval = window.setInterval(() => {\n        if (!isPending) {\n          window.clearInterval(interval);\n          interval = null;\n          return;\n        }\n\n        isPending = false;\n        // @ts-ignore\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithRaf(fn) {\n  let waiting = false;\n  let args;\n\n  return function (..._args) {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      requestAnimationFrame(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport function debounce(fn, ms, shouldRunFirst = true, shouldRunLast = true) {\n  let waitingTimeout = null;\n\n  return function () {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = null;\n    } else if (shouldRunFirst) {\n      fn();\n    }\n\n    waitingTimeout = setTimeout(() => {\n      if (shouldRunLast) {\n        fn();\n      }\n\n      waitingTimeout = null;\n    }, ms);\n  };\n}\n","import { addReducer, getDispatch, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\nwindow.addEventListener('popstate', (e) => {\n  if (!e.state) {\n    return;\n  }\n\n  const { chatId: id, threadId, messageListType: type } = e.state;\n\n  getDispatch().openChat({\n    id, threadId, type, noPushState: true,\n  });\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      window.history.pushState({ chatId: id, threadId, messageListType: type }, '');\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  return toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n});\n\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings } from '../../../types';\nimport { replaceSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_MOBILE_SCREEN) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if (!getReadableErrorText(error)) {\n    return global;\n  }\n\n  const newErrors = [...global.errors];\n  const existingErrorIndex = newErrors.findIndex((err) => err.message === error.message);\n  if (existingErrorIndex !== -1) {\n    newErrors.splice(existingErrorIndex, 1);\n  }\n\n  newErrors.push(error);\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('dismissError', (global) => {\n  const newErrors = [...global.errors];\n\n  newErrors.pop();\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 200;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForFetchFullChat = debounce((cb) => cb(), 500, false, true);\nconst runDebouncedForFetchOnlines = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n\n      if (IS_TOUCH_ENV) {\n        actions.loadPinnedMessages({ chatId: chatToPreload.id });\n      }\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForFetchFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadSuperGroupOnlines', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  runDebouncedForFetchOnlines(() => callApi('fetchSuperGroupOnlines', chat));\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', chat);\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const chat = await callApi('openChatByInvite', hash);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', draft);\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  const { chatId, maxId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  void callApi('markMessageListRead', { chat, threadId, maxId });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos, firstMessageId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  if (firstMessageId) {\n    global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n  }\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query, limit: GLOBAL_SEARCH_SLICE });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chats: localChats,\n      users: localUsers,\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chats: globalChats,\n      users: globalUsers,\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { hash, lastRequestedAt } = global.topPeers;\n\n  if (!lastRequestedAt || Date.now() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now(),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationsSettings', () => {\n  (async () => {\n    const result = await callApi('loadNotificationsSettings');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, isShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, isShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, isShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        window.open(button.value);\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showError({ error: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      if (update.chatId === currentChatId) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!message.isOutgoing) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds]\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const { chatId, threadId, threadInfo } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    global = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../lib/lovely-chart/utils';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.isShowPreviews);\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(event);\n    }\n\n    if (onCheck) {\n      onCheck(event.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  APP_INFO, DEFAULT_PATTERN_COLOR, FEEDBACK_URL, DARK_THEME_BG_COLOR, DARK_THEME_PATTERN_COLOR,\n} from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? 'Open menu' : 'Return to chat list'}\n      >\n        <div className={buildClassName('animated-menu-icon', !hasMenu && 'state-back')} />\n      </Button>\n    );\n  }, [hasMenu, onReset]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    const isNewThemeDark = newTheme === 'dark';\n\n    setSettingOption({\n      theme: newTheme,\n      customBackground: isNewThemeDark ? DARK_THEME_BG_COLOR : undefined,\n      patternColor: isNewThemeDark ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n    switchTheme(newTheme, animationLevel > 0);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const lang = useLang();\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={APP_INFO}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">Dark Mode</span>\n            <Switcher\n              id=\"darkmode\"\n              label=\"Toggle Dark Mode\"\n              checked={theme === 'dark'}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            Telegram Features\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { theme, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { FC } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = ({ connectionState }) => {\n  const lang = useLang();\n\n  const isConnecting = connectionState === 'connectionStateConnecting';\n\n  return isConnecting && (\n    <div id=\"ConnectionState\">\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default withGlobal(\n  (global): StateProps => pick(global, ['connectionState']),\n)(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders'>;\n\nconst INFO_THROTTLE = 3000;\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  orderedFolderIds,\n  lastSyncTime,\n  loadChatFolders,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: 'All' },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeTab >= folderTabs.length) {\n      setActiveTab(0);\n    }\n  }, [activeTab, folderTabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, folderTabs]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  const lang = useLang();\n\n  function renderCurrentTab() {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeTab].title);\n\n    if (!activeFolder || activeTab === 0) {\n      return <ChatList folderType=\"all\" />;\n    }\n\n    return <ChatList folderType=\"folder\" folderId={activeFolder.id} noChatsText={lang('FilterNoChatsToDisplay')} />;\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeTab} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name=\"slide\"\n        activeKey={activeTab}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadChatFolders']),\n)(ChatFolders));\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={isMenuOpen ? 'Close' : 'Create new chat'}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>New Private Chat</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n      />\n      <ConnectionState />\n      <Transition name=\"zoom-fade\" renderCount={TRANSITION_RENDER_COUNT} activeKey={content}>\n        {() => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [content, setGlobalSearchQuery, setGlobalSearchChatId, setGlobalSearchDate, resetChatCreation, settingsScreen]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setGlobalSearchQuery, searchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList ? captureEscKeyListener(() => handleReset()) : undefined),\n    [content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n    >\n      {() => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreen}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { query, date } = global.globalSearch;\n    return { searchQuery: query, searchDate: date };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { IDimensions } from '../modules/helpers';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\n\nconst RESIZE_TIMEOUT_MS = 250;\n\nexport default () => {\n  const [size, setSize] = useState<IDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, RESIZE_TIMEOUT_MS, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  return size;\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport usePrevious from './usePrevious';\nimport useForceUpdate from './useForceUpdate';\nimport useOnChange from './useOnChange';\n\nexport default function usePrevForAnimation(current: any, duration?: number) {\n  const prev = usePrevious(current, true);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n  // eslint-disable-next-line no-null/no-null\n  const isCurrentPresent = current !== undefined && current !== null;\n\n  if (isCurrentPresent && timeoutRef.current) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useOnChange(() => {\n    // When `current` becomes empty\n    if (duration && !isCurrentPresent && prev && !timeoutRef.current) {\n      timeoutRef.current = window.setTimeout(() => {\n        timeoutRef.current = undefined;\n        forceUpdate();\n      }, duration);\n    }\n  }, [current]);\n\n  return !timeoutRef.current || !duration || isCurrentPresent ? current : prev;\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import usePrevious from './usePrevious';\n\nexport default function useCurrentOrPrev<T extends any>(\n  current: T, shouldSkipUndefined = false, shouldForceCurrent = false,\n): T | undefined {\n  const prev = usePrevious(current, shouldSkipUndefined);\n\n  // eslint-disable-next-line no-null/no-null\n  return shouldForceCurrent || (current !== null && current !== undefined) ? current : prev;\n}\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default HeaderMenuContainerAsync;\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_MOBILE_SCREEN) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_MOBILE_SCREEN && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('Start')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_MOBILE_SCREEN || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_MOBILE_SCREEN}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_MOBILE_SCREEN && canSubscribe)\n      || (IS_MOBILE_SCREEN && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p>{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiAudio, ApiMessage } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  senderName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, senderName, focusMessage, closeAudioPlayer,\n}) => {\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  const lang = useLang();\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)}>\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }) => {\n    const sender = selectSender(global, message);\n    const senderName = sender ? getSenderTitle(sender) : undefined;\n\n    return { senderName };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageTitle?: string;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatTitleLength?: number;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageTitle,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chatTitleLength,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [chatId]);\n\n  // Modify index after unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(pinnedMessagesCount ? cycleRestrict(pinnedMessagesCount, pinnedMessageIndex) : -1);\n  }, [pinnedMessagesCount, pinnedMessageIndex]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = windowWidth >= MOBILE_SCREEN_MAX_WIDTH && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback(() => {\n    if (IS_MOBILE_SCREEN) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_MOBILE_SCREEN) {\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, chat) => {\n      if (isChatArchived(chat)) {\n        return total;\n      }\n\n      const count = chat.unreadCount || 0;\n      if (count && (!chat.isMuted || chat.unreadMentionsCount)) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const lang = useLang();\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    let state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chatTitleLength: chat && getChatTitle(chat).length,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType === 'thread' && messagesById) {\n      if (threadId === MAIN_THREAD_ID) {\n        const pinnedMessageIds = selectPinnedIds(global, chatId);\n\n        if (pinnedMessageIds && pinnedMessageIds.length) {\n          const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n          const {\n            canUnpin,\n          } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n          state = {\n            ...state,\n            pinnedMessageIds,\n            messagesById,\n            canUnpin,\n          };\n        }\n      } else {\n        const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n        const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n        const sender = message ? selectForwardedSender(global, message) : undefined;\n        const topMessageTitle = sender ? getSenderTitle(sender) : undefined;\n\n        state = {\n          ...state,\n          pinnedMessageIds: pinnedMessageId,\n          messagesById,\n          canUnpin: false,\n          topMessageTitle,\n        };\n      }\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDatetime = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDatetime) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDatetime,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  containerHeight?: number;\n  listItemElementsRef: MutableRefObject<HTMLDivElement[] | undefined>;\n  anchorIdRef: MutableRefObject<string | undefined>;\n  anchorTopRef: MutableRefObject<number | undefined>;\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  focusingId?: number;\n  onFabToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst FAB_FREEZE_TIMEOUT = 100;\n\n// Local flag is used because `freeze/unfreeze` methods are controlled by heavy animation\nlet isFabFrozen = false;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  containerHeight,\n  listItemElementsRef,\n  focusingId,\n  anchorIdRef,\n  anchorTopRef,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const updateFabVisibility = useCallback(() => {\n    if (isFabFrozen) {\n      return;\n    }\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom === 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId]);\n\n  const {\n    observe: observeIntersection,\n    freeze: freezeForLoadMore,\n    unfreeze: unfreezeForLoadMore,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger' && (target as HTMLDivElement).dataset.isActive) {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, ([{ target }]) => {\n    if ((target as HTMLDivElement).dataset.isActive) {\n      updateFabVisibility();\n    }\n  });\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  // Do not load more and show FAB when focusing\n  useOnChange(() => {\n    if (focusingId) {\n      freezeForLoadMore();\n      freezeForFab();\n    } else {\n      unfreezeForFab();\n      unfreezeForLoadMore();\n    }\n  }, [focusingId]);\n\n  // Remember scroll position before updating height\n  useOnChange(() => {\n    if (!listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  }, [messageIds, containerHeight]);\n\n  // Workaround for FAB flickering with tall incoming message\n  useOnChange(() => {\n    isFabFrozen = true;\n\n    setTimeout(() => {\n      isFabFrozen = false;\n    }, FAB_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  // Workaround for stuck FAB when many unread messages\n  useEffect(updateFabVisibility, [firstUnreadId]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n        data-is-active={!isViewportNewest}\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n        data-is-active={isViewportNewest}\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean) {\n  return hasText ? MIN_MEDIA_WIDTH_WITH_TEXT : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto)\n    : calculateVideoDimensions(video!, isOwn, isForwarded);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage } from '../../../../api/types';\nimport { IDimensions } from '../../../../modules/helpers';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../../config';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nconst MAX_WIDTH_MOBILE_VW = 69;\nconst MAX_WIDTH_DESK_OWN_REM = 30;\nconst MAX_WIDTH_DESK_REM = 29;\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: IDimensions;\n};\n\nfunction getMaxWidth(isOwn: boolean, isForwarded: boolean, windowWidth: number) {\n  if (windowWidth <= MOBILE_SCREEN_MAX_WIDTH) {\n    return (windowWidth / 100) * MAX_WIDTH_MOBILE_VW - (isForwarded ? 1.625 : 0) * REM;\n  }\n\n  const maxWidth = isOwn ? MAX_WIDTH_DESK_OWN_REM : MAX_WIDTH_DESK_REM;\n\n  return (maxWidth - (isForwarded ? 1.625 : 0)) * REM;\n}\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as IDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: IDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  album: IAlbum,\n  windowWidth: number,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getMaxWidth(isOwn, isForwarded, windowWidth);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = '400 12px Roboto, \"Helvetica Neue\", \"Apple Color Emoji\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'center',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={buildClassName(\n        'ActionMessage message-list-item',\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        transitionClassNames,\n      )}\n      data-message-id={message.id}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n\n  useLang();\n\n  const senderTitle = sender && getSenderTitle(sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl)}\n      <div className=\"message-text\">\n        <div className=\"message-title\">{renderText(senderTitle || title || NBSP)}</div>\n        <p>\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img id={id} src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default MessageMeta;\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { LAYERS_TRANSITION_DURATION } from '../../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useBlur from '../../../../hooks/useBlur';\n\nexport default function useBlurredMediaThumb(message: ApiMessage, fullMediaData?: string) {\n  return useBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_MOBILE_SCREEN ? LAYERS_TRANSITION_DURATION : undefined,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = 'rgba(255,255,255,1)';\n\nexport default async (src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) => {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n};\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbDataUri = useBlurredMediaThumb(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const thumbClassName = buildClassName(\n    'thumbnail',\n    !thumbDataUri && 'empty',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <img\n          src={thumbDataUri}\n          className={thumbClassName}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  canMessagePlayVideoInline,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n  const localBlobUrl = video.blobUrl;\n  const canPlayInline = Boolean(localBlobUrl) || canMessagePlayVideoInline(video);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurredMediaThumb(message, previewBlobUrl);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const previewMediaData = previewBlobUrl || thumbDataUri;\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(canPlayInline && isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && (canPlayInline && !isBuffered),\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded);\n\n  useHeavyAnimationCheckForVideo(videoRef, isInline);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (canPlayInline && !fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (canPlayInline && fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, canPlayInline, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const thumbClassName = buildClassName('thumbnail', !previewMediaData && 'empty');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n  const videoStyle = previewMediaData ? `background-image: url(${previewMediaData}); background-size: cover` : '';\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderHqPreview = !canPlayInline && mediaData;\n  const shouldRenderPlayButton = !canPlayInline || (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = canPlayInline && !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(shouldRenderThumb || !isInline) && (\n        <img\n          src={previewMediaData}\n          className={thumbClassName}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // @ts-ignore teact feature\n          style={videoStyle}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderHqPreview && (\n        <img\n          src={mediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && !canPlayInline ? (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      ) : isTransferring && canPlayInline ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(video.duration - playProgress)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\">\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {getPollTypeString(summary)}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'Quiz' : 'Anonymous Quiz';\n  }\n\n  if (summary.closed) {\n    return 'Final results';\n  }\n\n  return summary.isPublic ? 'Poll' : 'Anonymous Poll';\n}\n\nfunction getReadableVotersCount(isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return isQuiz ? 'No answers yet' : 'No voters yet';\n  }\n\n  return isQuiz ? `${count} answered` : `${count} voted`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { byId: usersById } = global.users;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  inPreview?: boolean;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  inPreview,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    if (webPage && (isSquarePhoto || webPage.hasDocument)) {\n      window.open(webPage.url);\n    } else if (onMediaClick) {\n      onMediaClick();\n    }\n  }, [webPage, isSquarePhoto, onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n  } = webPage;\n\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = [\n    'WebPage',\n    photo\n      ? (isSquarePhoto && 'with-square-photo')\n      : (!inPreview && 'without-photo'),\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n    >\n      {photo && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          onClick={handleMediaClick}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrapedComponent: FC) {\n  const Component: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrapedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(Component));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurredMediaThumb(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n      capturePlaying();\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {shouldRenderThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <img\n            src={thumbDataUri}\n            className=\"thumbnail\"\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            alt=\"\"\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            poster={thumbDataUri}\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\">\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\">{renderLabel(messagesCount)}</div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nfunction renderLabel(messagesCount: number) {\n  if (messagesCount === 0) {\n    return 'Leave a Comment';\n  }\n\n  if (messagesCount === 1) {\n    return '1 Comment';\n  }\n\n  return `${formatInteger(messagesCount)} Comments`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { FocusDirection, IAlbum, MediaViewerOrigin } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia, selectShouldLoopStickers,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji, getSenderTitle, getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentsButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), album!, windowWidth) : undefined;\n  }, [isAlbum, windowWidth, isOwn, asForwarded, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text)), width);\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text)), albumLayout.containerStyle.width);\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick}>\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && <p className=\"text-content\">{textParts}</p>}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  );\n  const showCommentsButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleBeforeContextMenu : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n        >\n          {contentClassName.includes('has-appendix') && (<div className=\"svg-appendix\" ref={appendixRef} />)}\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Forward message\"\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {showCommentsButton && <CommentsButton message={message} disabled={noComments} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_IOS, IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages, selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n  getCanPostInChat,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, throttleWithTickEnd, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  onFabToggle: (show: boolean) => void;\n  hasTools?: boolean;\n  bottomOffset: 'none' | 'small' | 'big';\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  canPost?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_MOBILE_SCREEN ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\nconst runThrottledOnTickEnd = throttleWithTickEnd((cb) => cb());\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  bottomOffset,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  // Updated when opening chat (to preserve divider even after messages are read)\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>(firstUnreadId);\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(!messageIds);\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia, freeze: freezeForMedia, unfreeze: unfreezeForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n\n    if (focusingId) {\n      freezeForMedia();\n      freezeForReading();\n    } else {\n      unfreezeForReading();\n      unfreezeForMedia();\n    }\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Workaround for an iOS bug when animated stickers sometimes disappear\n  useLayoutEffect(() => {\n    if (!IS_IOS) {\n      return;\n    }\n\n    runThrottledOnTickEnd(() => {\n      if (!(containerRef.current as HTMLDivElement).querySelector('.AnimatedSticker.is-playing')) {\n        return;\n      }\n\n      const style = (containerRef.current as HTMLDivElement).style as any;\n      style.webkitOverflowScrolling = style.webkitOverflowScrolling === 'auto' ? '' : 'auto';\n    });\n  });\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(container, lastItemElement, 'end', BOTTOM_FOCUS_MARGIN);\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP);\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    !withUsers && 'no-avatars',\n    isChannelChat && 'no-avatars',\n    (!canPost || bottomOffset !== 'none') && 'bottom-padding',\n    (bottomOffset !== 'none') && `bottom-padding-${bottomOffset}`,\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div ref={containerRef} className={className} onScroll={handleScroll}>\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          containerHeight={containerHeight}\n          listItemElementsRef={listItemElementsRef}\n          focusingId={focusingId}\n          anchorIdRef={anchorIdRef}\n          anchorTopRef={anchorTopRef}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId?: number,\n  threadFirstMessageId?: number,\n  hasLinkedChat?: boolean,\n  isSchedule = false,\n  noAppearanceAnimation = false,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const shouldRenderUnreadDivider = (\n          (message.id === memoFirstUnreadIdRef.current && memoFirstUnreadIdRef.current !== threadFirstMessageId)\n          || (message.id === threadTopMessageId && memoFirstUnreadIdRef.current === threadFirstMessageId)\n        );\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          shouldRenderUnreadDivider && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        teactFastList\n      >\n        <div className=\"sticky-date\" key=\"date-header\">\n          <span>\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      canPost: getCanPostInChat(chat, threadId),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { getCanPostInChat } from '../../modules/helpers';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  canPost?: boolean;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  messageListType,\n  canPost,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messsageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messsageElements[messsageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel=\"Scroll to bottom\"\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const canPost = chat && getCanPostInChat(chat, threadId);\n\n    return {\n      messageListType,\n      canPost,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"8ccc0b555efcec3616377aea078dda16.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && input.tagName === 'INPUT' && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  // Subscribe and handle `window.blur`\n  useEffect(() => {\n    function handleBlur() {\n      if (chatId && threadId) {\n        updateDraft(chatId, threadId);\n      }\n    }\n\n    window.addEventListener('blur', handleBlur);\n\n    return () => {\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [chatId, threadId, updateDraft]);\n};\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default AttachMenuAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default SymbolMenuAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionMenu = useModuleLoader(Bundles.Extra, 'MentionMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionMenu ? <MentionMenu {...props} /> : undefined;\n};\n\nexport default MentionMenuAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default CustomSendMenuAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './EmojiTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const EmojiTooltip = useModuleLoader(Bundles.Extra, 'EmojiTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiTooltip ? <EmojiTooltip {...props} /> : undefined;\n};\n\nexport default EmojiTooltipAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default BotKeyboardMenuAsync;\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = /https?:\\/\\/(www.)?([a-zA-Z0-9.-]{2,256})([a-zA-Z/.-]{1,256})([?|#][=&#a-zA-Z0-9]{2,128})?/;\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  if (!webPagePreview || !messageText.length || noWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = webPagePreview;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className=\"WebPagePreview\">\n      <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n        <i className=\"icon-close\" />\n      </Button>\n      <WebPage message={messageStub} inPreview />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default CalendarModalAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_EMOJI_SUPPORTED, IS_VOICE_RECORDING_SUPPORTED, IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionMenu from './hooks/useMentionMenu';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionMenu from './MentionMenu.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showError' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showError,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionMenuOpen, mentionFilter,\n    closeMentionMenu, insertMention,\n    mentionFilteredMembers,\n  } = useMentionMenu(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isEmojiTooltipOpen, closeEmojiTooltip } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        if (IS_EMOJI_SUPPORTED) {\n          // Insertion will trigger `onChange` in MessageInput, so no need to setHtml in state\n          document.execCommand('insertText', false, text);\n        } else {\n          insertHtmlInSelection(newHtml);\n          messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n\n        return;\n      }\n\n      setHtml(`${htmlRef.current!}${newHtml}`);\n\n      if (!IS_MOBILE_SCREEN) {\n        // If selection is outside of input, set cursor at the end of input\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput);\n        });\n      }\n    } else {\n      setHtml(`${htmlRef.current!}${newHtml}`);\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeEmojiTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionMenu();\n\n    if (IS_MOBILE_SCREEN) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeEmojiTooltip, closeCalendar, closeMentionMenu, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showError({\n        error: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showError({\n            error: {\n              message: `A wait of ${secondsRemaining} seconds is required before sending another message in this chat`,\n              isSlowMode: true,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000);\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    activeVoiceRecording, attachments, connectionState, chatId, slowMode, isForwarding, isAdmin,\n    sendMessage, stopRecordingVoice, resetComposer, clearDraft, showError, forwardMessages,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000));\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_MOBILE_SCREEN || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_MOBILE_SCREEN) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const lang = useLang();\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'Send message';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Posting media content is not allowed in this group.'\n        : 'Record a voice message';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        onCaptionUpdate={setHtml}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionMenu\n        isOpen={isMentionMenuOpen}\n        filter={mentionFilter}\n        onClose={closeMentionMenu}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        {allowedAttachmentOptions.canAttachEmbedLinks && (\n          <WebPagePreview chatId={chatId} threadId={threadId} messageText={!attachments.length ? html : ''} />\n        )}\n        <div className=\"message-input-wrapper\">\n          {IS_MOBILE_SCREEN ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSupressFocus={IS_MOBILE_SCREEN && isSymbolMenuOpen}\n            onUpdate={setHtml}\n            onSend={mainButtonState === MainButtonState.Edit\n              ? handleEditComplete\n              : (shouldSchedule ? openCalendar : handleSend)}\n            onSupressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={sendButtonAriaLabel}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showError',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useEmojiTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isEmojiTooltipOpen: hasStickers,\n    closeEmojiTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n} from '../../config';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV, MASK_IMAGE_ENABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevForAnimation from '../../hooks/usePrevForAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  customBackground?: string;\n  patternColor?: string;\n  isCustomBackgroundColor?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_MOBILE_SCREEN ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  customBackground,\n  patternColor,\n  isCustomBackgroundColor,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState(false);\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const renderingChatId = usePrevForAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevForAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevForAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevForAnimation(canPost, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const customBackgroundValue = useCustomBackground(customBackground);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const className = buildClassName(\n    hasTools && 'has-header-tools',\n    customBackground && !isCustomBackgroundColor && 'custom-bg-image',\n    customBackground && isCustomBackgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_ENABLED ? 'mask-image-enabled' : 'mask-image-disabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n      `}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    hasTools={hasTools}\n                    onFabToggle={setIsFabShown}\n                    bottomOffset={renderingCanPost ? 'none' : (isPinnedMessageList ? 'big' : 'small')}\n                  />\n                  <div className={buildClassName('middle-column-footer', !renderingCanPost && 'no-composer')}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\">\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.PanelHidePinnedMessages')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton isShown={isFabShown} />\n          </div>\n          {IS_MOBILE_SCREEN && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { isBackgroundBlurred, customBackground, patternColor } = global.settings.byKey;\n\n    const isCustomBackgroundColor = Boolean((customBackground || '').match(/^#[a-f\\d]{6,8}$/i));\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds } } = global;\n    if (!currentMessageList || !listIds.active) {\n      return {\n        customBackground,\n        isBackgroundBlurred,\n        isCustomBackgroundColor,\n      };\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_MOBILE_SCREEN),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: Boolean(pinnedIds && pinnedIds.length) || Boolean(audioChatId && audioMessageId),\n      customBackground,\n      patternColor,\n      isCustomBackgroundColor,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_MOBILE_SCREEN && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { useEffect, useState } from '../lib/teact/teact';\n\nexport default (settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, CUSTOM_BG_CACHE_NAME, cacheApi.Type.Blob)\n        .then((blob) => {\n          setValue(`url(${URL.createObjectURL(blob)}`);\n        });\n    }\n  }, [settingValue]);\n\n  return value;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal.async';\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'searchMessagesByDate'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  searchMessagesByDate,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeCalendar();\n  }, [closeCalendar, searchMessagesByDate]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={openCalendar}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder=\"Search Stickers\"\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang('Statistics')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{lang('Info')}</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_MOBILE_SCREEN\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    shouldSkipTransition && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n      {!IS_MOBILE_SCREEN && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          isPastMode\n          submitButtonLabel={lang('JumpToDate')}\n          onClose={closeCalendar}\n          onSubmit={handleJumpToDate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'searchMessagesByDate',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, getSortedUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return getSortedUserIds(groupChatMembers.map(({ userId }) => userId), usersById);\n  }, [groupChatMembers, usersById]);\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberIds;\n      getMore = undefined;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, useEffect, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\n\nimport { selectUser } from '../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser'>;\n\nconst UserExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime, user, forceShowSelf, loadFullUser,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const lang = useLang();\n\n  if (!user || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  const bio = fullInfo && fullInfo.bio;\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n\n  return (\n    <div className=\"ChatExtra\">\n      {bio && !!bio.length && (\n        <div className=\"item\">\n          <i className=\"icon-info\" />\n          <div>\n            <p className=\"title\">{renderText(bio, ['br', 'links', 'emoji'])}</p>\n            <p className=\"subtitle\">{lang('UserBio')}</p>\n          </div>\n        </div>\n      )}\n      {username && !!username.length && (\n        <div className=\"item\">\n          <i className=\"icon-mention\" />\n          <div>\n            <p className=\"title\">{renderText(username)}</p>\n            <p className=\"subtitle\">{lang('Username')}</p>\n          </div>\n        </div>\n      )}\n      {formattedNumber && !!formattedNumber.length && (\n        <div className=\"item\">\n          <i className=\"icon-phone\" />\n          <div>\n            <p className=\"title\">{formattedNumber}</p>\n            <p className=\"subtitle\">{lang('Phone')}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { lastSyncTime } = global;\n    const user = selectUser(global, userId);\n\n    return { lastSyncTime, user };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser']),\n)(UserExtra));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isUserRightBanned,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n};\n\nconst ChatExtra: FC<OwnProps & StateProps> = ({ chat, canInviteUsers }) => {\n  const lang = useLang();\n\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const description = getChatDescription(chat);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n\n  return (\n    <div className=\"ChatExtra\">\n      {description && !!description.length && (\n        <div className=\"item\">\n          <i className=\"icon-info\" />\n          <div>\n            <p className=\"title\">{renderText(description, ['br', 'links', 'emoji'])}</p>\n            <p className=\"subtitle\">{lang('Info')}</p>\n          </div>\n        </div>\n      )}\n      {canInviteUsers && !!link.length && (\n        <div className=\"item\">\n          <i className=\"icon-mention\" />\n          <div>\n            <SafeLink url={url} className=\"title\" text={link} />\n            <p className=\"subtitle\">{lang('SetUrlPlaceholder')}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return { chat, canInviteUsers };\n  },\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport { SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport UserExtra from './UserExtra';\nimport GroupExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = 'No documents found.';\n          break;\n        case 'links':\n          text = 'No links found.';\n          break;\n        case 'audio':\n          text = 'No audio found.';\n          break;\n        default:\n          text = 'No media found.';\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div className={`content ${resultType}-list`} teactFastList>\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              renderingFor=\"sharedMedia\"\n              message={chatMessages[id]}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={viewportIds}\n      cacheBuster={cacheBuster}\n      preloadBackwards={SHARED_MEDIA_SLICE}\n      isDisabled={tabType === 'members'}\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name=\"slide\"\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      {resolvedUserId ? (\n        <>\n          <PrivateChatInfo\n            userId={resolvedUserId}\n            avatarSize=\"jumbo\"\n            forceShowSelf={resolvedUserId !== chatId}\n            withMediaViewer\n            withFullInfo\n          />\n          <UserExtra userId={resolvedUserId} forceShowSelf={resolvedUserId !== chatId} />\n        </>\n      ) : (\n        <>\n          <GroupChatInfo chatId={chatId} avatarSize=\"jumbo\" withMediaViewer withFullInfo />\n          <GroupExtra chatId={chatId} />\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>('.Transition');\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StatisticsAsync: FC = () => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './Statistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'toggleStatistics' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  toggleStatistics,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback(() => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo();\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, toggleStatistics, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n      case RightColumnContent.Statistics:\n        return <Statistics />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'toggleStatistics',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ErrorsAsync: FC = ({ isOpen }) => {\n  const Errors = useModuleLoader(Bundles.Extra, 'Errors', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Errors ? <Errors /> : undefined;\n};\n\nexport default ErrorsAsync;\n","import React, { FC } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default ForwardPickerAsync;\n","import React, { FC, useEffect, memo } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport { ANIMATION_END_DELAY, DEBUG } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Errors from './Errors.async';\nimport ForwardPicker from './ForwardPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasErrors: boolean;\n  audioMessage?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadAnimatedEmojis'>;\n\nconst APP_NAME = 'Telegram';\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  loadAnimatedEmojis,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasErrors,\n  audioMessage,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAnimatedEmojis();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n    // For animating components in portals (i.e. Notification)\n    document.body.classList.toggle('is-right-column-shown', className.includes('right-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  useBackgroundMode(() => {\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = APP_NAME;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, () => {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n    document.title = APP_NAME;\n    updateIcon(false);\n  });\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Errors isOpen={hasErrors} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasErrors: Boolean(global.errors.length),\n      audioMessage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadAnimatedEmojis']),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}