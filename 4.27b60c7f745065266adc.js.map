{"version":3,"sources":["webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumb.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Errors.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["window","addEventListener","e","state","chatId","id","threadId","messageListType","type","getDispatch","openChat","noPushState","addReducer","global","actions","payload","currentMessageList","selectCurrentMessageList","exitMessageSelectMode","messages","contentToBeScheduled","undefined","forwardMessages","toChatId","setGlobal","history","pushState","updateCurrentMessageList","isChatInfoShown","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","setTimeout","newGlobal","getGlobal","lastMessageId","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","focusMessage","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","length","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","management","byChatId","isActive","IS_MOBILE_SCREEN","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","message","splice","push","error","getReadableErrorText","newErrors","errors","existingErrorIndex","err","url","safeLinkModalUrl","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","map","Number","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","showNotification","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","createChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","userId","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","setReplyingToId","clearWebPagePreview","value","selectReplyingToId","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","indexOf","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","draftsByChatId","acc","lastReadInboxMessageId","newCurrentChatId","currentMessageListInfo","threadsById","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","lastRequestedAt","topPeers","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","data","alert","isError","showError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","settings","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","isShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isLoading","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","selectIsViewportNewest","lastReadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","twoFaSettings","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","theme","animationLevel","byKey","globalSearchChatId","searchDate","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","isNewThemeDark","customBackground","DARK_THEME_BG_COLOR","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_INFO","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","SearchInput","inputId","focused","placeholder","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","connectionState","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","transitionRef","activeTab","setActiveTab","useState","useEffect","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","IS_TOUCH_ENV","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","NewChat","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","removeEventListener","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","fluid","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","useFlag","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","senderName","getSenderTitle","noUi","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","isSelectModeActive","chatTitleLength","getChatTitle","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","selectForwardedSender","topMessageTitle","pinnedMessageIds","canUnpin","firstPinnedMessage","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","newIndex","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","isAlbum","messageOrAlbum","groupMessages","firstUnreadId","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDatetime","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","isFabFrozen","MessageScroll","focusingId","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","updateFabVisibility","scrollHeight","scrollBottom","isNearBottom","isAtBottom","IS_SAFARI","observe","observeIntersection","freeze","freezeForLoadMore","unfreeze","unfreezeForLoadMore","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","target","resetScroll","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","REM","getMaxWidth","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumb","fullMediaData","useBlur","LAYERS_TRANSITION_DURATION","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","canPlayInline","canMessagePlayVideoInline","setIsPlayAllowed","previewMediaData","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","usePauseOnInactive","useVideoCleanup","videoClassName","videoStyle","shouldRenderInlineVideo","shouldRenderHqPreview","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","duration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","hasDocument","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrapedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","toString","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","poster","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","isLastInList","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","avatarPeer","senderPeer","adminTitle","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","fromMessageId","calculatedWidth","noMediaCorners","extraPadding","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","selectFirstUnreadId","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","freezeForMedia","unfreezeForMedia","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusLastMessage","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","startsWith","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","formattedText","currentThreadId","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","replyingToId","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_IOS","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","execCommand","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","tagName","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","preventDefault","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onSend","onFileAppend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSupressFocus","shouldSupressTextFormatter","onUpdate","onSupressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","selectedAt","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBackgroundBlurred","isCustomBackgroundColor","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","onDragEnter","ANIMATION_LEVEL_MAX","shouldCleanup","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","backButtonRef","handleMessageSearchQueryChange","handleJumpToDate","valueOf","handleStickerSearchQueryChange","handleGifSearchQueryChange","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","isPastMode","submitButtonLabel","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","currentIsMuted","chatUsername","handleNotificationChange","copy","entity","formattedNumber","getChatLink","printedUsername","getChatDescription","ListItem","multiline","narrow","isStatic","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","renderingFor","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","Errors","ForwardPicker","SafeLinkModal","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasErrors","middleColumnTransitionClassNames","rightColumnTransitionClassNames","stopEvent","initialUnread","selectCountNotMutedUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.27b60c7f745065266adc.js","sourcesContent":["import { addReducer, getDispatch, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\nwindow.addEventListener('popstate', (e) => {\n  if (!e.state) {\n    return;\n  }\n\n  const { chatId: id, threadId, messageListType: type } = e.state;\n\n  getDispatch().openChat({\n    id, threadId, type, noPushState: true,\n  });\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      window.history.pushState({ chatId: id, threadId, messageListType: type }, '');\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  return toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n});\n\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings } from '../../../types';\nimport { replaceSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_MOBILE_SCREEN) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if (!getReadableErrorText(error)) {\n    return global;\n  }\n\n  const newErrors = [...global.errors];\n  const existingErrorIndex = newErrors.findIndex((err) => err.message === error.message);\n  if (existingErrorIndex !== -1) {\n    newErrors.splice(existingErrorIndex, 1);\n  }\n\n  newErrors.push(error);\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('dismissError', (global) => {\n  const newErrors = [...global.errors];\n\n  newErrors.pop();\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', chat);\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const chat = await callApi('openChatByInvite', hash);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', draft);\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  const { chatId, maxId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', { chat, threadId, maxId });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { hash, lastRequestedAt } = global.topPeers;\n\n  if (!lastRequestedAt || Date.now() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now(),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationsSettings', () => {\n  (async () => {\n    const result = await callApi('loadNotificationsSettings');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, isShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, isShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, isShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showError({ error: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList, selectRealLastReadId, selectViewportIds,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!message.isOutgoing) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep at least one read message in the viewport list\n    const lastReadId = selectRealLastReadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!lastReadId || newViewportIds!.includes(lastReadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.isShowPreviews);\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  APP_INFO, DEFAULT_PATTERN_COLOR, FEEDBACK_URL, DARK_THEME_BG_COLOR, DARK_THEME_PATTERN_COLOR,\n} from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName('animated-menu-icon', !hasMenu && 'state-back')} />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    const isNewThemeDark = newTheme === 'dark';\n\n    setSettingOption({\n      theme: newTheme,\n      customBackground: isNewThemeDark ? DARK_THEME_BG_COLOR : undefined,\n      patternColor: isNewThemeDark ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n    switchTheme(newTheme, animationLevel > 0);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={APP_INFO}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { theme, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { FC } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = ({ connectionState }) => {\n  const lang = useLang();\n\n  const isConnecting = connectionState === 'connectionStateConnecting';\n\n  return isConnecting && (\n    <div id=\"ConnectionState\">\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default withGlobal(\n  (global): StateProps => pick(global, ['connectionState']),\n)(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders'>;\n\nconst INFO_THROTTLE = 3000;\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  orderedFolderIds,\n  lastSyncTime,\n  loadChatFolders,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeTab >= folderTabs.length) {\n      setActiveTab(0);\n    }\n  }, [activeTab, folderTabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, folderTabs]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeTab !== 0;\n  useEffect(() => captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveTab(0);\n    }\n  }), []);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab() {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeTab].title);\n\n    if (!activeFolder || activeTab === 0) {\n      return <ChatList folderType=\"all\" />;\n    }\n\n    return <ChatList folderType=\"folder\" folderId={activeFolder.id} noChatsText={lang('FilterNoChatsToDisplay')} />;\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeTab} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name=\"slide\"\n        activeKey={activeTab}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadChatFolders']),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n      />\n      <ConnectionState />\n      <Transition name=\"zoom-fade\" renderCount={TRANSITION_RENDER_COUNT} activeKey={content}>\n        {() => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [content, setGlobalSearchQuery, setGlobalSearchChatId, setGlobalSearchDate, resetChatCreation, settingsScreen]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setGlobalSearchQuery, searchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList ? captureEscKeyListener(() => handleReset()) : undefined),\n    [content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n    >\n      {() => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreen}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { query, date } = global.globalSearch;\n    return { searchQuery: query, searchDate: date };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { IDimensions } from '../modules/helpers';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<IDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_MOBILE_SCREEN) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_MOBILE_SCREEN && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('Start')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_MOBILE_SCREEN || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_MOBILE_SCREEN}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_MOBILE_SCREEN && canSubscribe)\n      || (IS_MOBILE_SCREEN && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p>{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiAudio, ApiMessage } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  senderName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, senderName, focusMessage, closeAudioPlayer,\n}) => {\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  const lang = useLang();\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)}>\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }) => {\n    const sender = selectSender(global, message);\n    const senderName = sender ? getSenderTitle(sender) : undefined;\n\n    return { senderName };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageTitle?: string;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatTitleLength?: number;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageTitle,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chatTitleLength,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = windowWidth >= MOBILE_SCREEN_MAX_WIDTH && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback(() => {\n    if (IS_MOBILE_SCREEN) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_MOBILE_SCREEN) {\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, chat) => {\n      if (isChatArchived(chat)) {\n        return total;\n      }\n\n      const count = chat.unreadCount || 0;\n      if (count && (!chat.isMuted || chat.unreadMentionsCount)) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const lang = useLang();\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chatTitleLength: chat && getChatTitle(chat).length,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const sender = message ? selectForwardedSender(global, message) : undefined;\n      const topMessageTitle = sender ? getSenderTitle(sender) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageTitle,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDatetime = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDatetime) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDatetime,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport { IS_SAFARI } from '../../util/environment';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  focusingId?: number;\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst FAB_FREEZE_TIMEOUT = 100;\n\n// Local flag is used because `freeze/unfreeze` methods are controlled by heavy animation\nlet isFabFrozen = false;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  focusingId,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const updateFabVisibility = useCallback(() => {\n    if (isFabFrozen) {\n      return;\n    }\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom === 0 || (IS_SAFARI && scrollBottom === 1);\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId]);\n\n  const {\n    observe: observeIntersection,\n    freeze: freezeForLoadMore,\n    unfreeze: unfreezeForLoadMore,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, () => {\n    updateFabVisibility();\n  });\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  // Do not load more and show FAB when focusing\n  useOnChange(() => {\n    if (focusingId) {\n      freezeForLoadMore();\n      freezeForFab();\n    } else {\n      unfreezeForFab();\n      unfreezeForLoadMore();\n    }\n  }, [focusingId]);\n\n  // Workaround for FAB flickering with tall incoming message\n  useOnChange(() => {\n    isFabFrozen = true;\n\n    setTimeout(() => {\n      isFabFrozen = false;\n    }, FAB_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  // Workaround for stuck FAB when many unread messages\n  useEffect(updateFabVisibility, [firstUnreadId]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto)\n    : calculateVideoDimensions(video!, isOwn, isForwarded);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage } from '../../../../api/types';\nimport { IDimensions } from '../../../../modules/helpers';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../../config';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nconst MAX_WIDTH_MOBILE_VW = 69;\nconst MAX_WIDTH_DESK_OWN_REM = 30;\nconst MAX_WIDTH_DESK_REM = 29;\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: IDimensions;\n};\n\nfunction getMaxWidth(isOwn: boolean, isForwarded: boolean, windowWidth: number) {\n  if (windowWidth <= MOBILE_SCREEN_MAX_WIDTH) {\n    return (windowWidth / 100) * MAX_WIDTH_MOBILE_VW - (isForwarded ? 1.625 : 0) * REM;\n  }\n\n  const maxWidth = isOwn ? MAX_WIDTH_DESK_OWN_REM : MAX_WIDTH_DESK_REM;\n\n  return (maxWidth - (isForwarded ? 1.625 : 0)) * REM;\n}\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as IDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: IDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  album: IAlbum,\n  windowWidth: number,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getMaxWidth(isOwn, isForwarded, windowWidth);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = '400 12px Roboto, \"Helvetica Neue\", \"Apple Color Emoji\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'center',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={buildClassName(\n        'ActionMessage message-list-item',\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        transitionClassNames,\n      )}\n      data-message-id={message.id}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl)}\n      <div className=\"message-text\">\n        <div className=\"message-title\">{renderText(senderTitle || title || NBSP)}</div>\n        <p>\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img id={id} src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { LAYERS_TRANSITION_DURATION } from '../../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useBlur from '../../../../hooks/useBlur';\n\nexport default function useBlurredMediaThumb(message: ApiMessage, fullMediaData?: string) {\n  return useBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_MOBILE_SCREEN ? LAYERS_TRANSITION_DURATION : undefined,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = 'rgba(255,255,255,1)';\n\nexport default async (src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) => {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n};\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbDataUri = useBlurredMediaThumb(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const thumbClassName = buildClassName(\n    'thumbnail',\n    !thumbDataUri && 'empty',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <img\n          src={thumbDataUri}\n          className={thumbClassName}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  canMessagePlayVideoInline,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n  const localBlobUrl = video.blobUrl;\n  const canPlayInline = Boolean(localBlobUrl) || canMessagePlayVideoInline(video);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurredMediaThumb(message, previewBlobUrl);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const previewMediaData = previewBlobUrl || thumbDataUri;\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(canPlayInline && isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && (canPlayInline && !isBuffered),\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (canPlayInline && !fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (canPlayInline && fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, canPlayInline, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const thumbClassName = buildClassName('thumbnail', !previewMediaData && 'empty');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n  const videoStyle = previewMediaData ? `background-image: url(${previewMediaData}); background-size: cover` : '';\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderHqPreview = !canPlayInline && mediaData;\n  const shouldRenderPlayButton = !canPlayInline || (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = canPlayInline && !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(shouldRenderThumb || !isInline) && (\n        <img\n          src={previewMediaData}\n          className={thumbClassName}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // @ts-ignore teact feature\n          style={videoStyle}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderHqPreview && (\n        <img\n          src={mediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && !canPlayInline ? (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      ) : isTransferring && canPlayInline ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(video.duration - playProgress)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\">\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {getPollTypeString(summary)}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'Quiz' : 'Anonymous Quiz';\n  }\n\n  if (summary.closed) {\n    return 'Final results';\n  }\n\n  return summary.isPublic ? 'Poll' : 'Anonymous Poll';\n}\n\nfunction getReadableVotersCount(isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return isQuiz ? 'No answers yet' : 'No voters yet';\n  }\n\n  return isQuiz ? `${count} answered` : `${count} voted`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { byId: usersById } = global.users;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  inPreview?: boolean;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  inPreview,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n  } = webPage;\n\n  const isMediaInteractive = photo && onMediaClick && !isSquarePhoto && !webPage.hasDocument;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    photo\n      ? (isSquarePhoto && 'with-square-photo')\n      : (!inPreview && 'without-photo'),\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n    >\n      {photo && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrapedComponent: FC) {\n  const Component: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrapedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(Component));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurredMediaThumb(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {shouldRenderThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <img\n            src={thumbDataUri}\n            className=\"thumbnail\"\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            alt=\"\"\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            poster={thumbDataUri}\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n              {button.type === 'url' && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\">\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { FocusDirection, IAlbum, MediaViewerOrigin } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia, selectShouldLoopStickers,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji, getSenderTitle, getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), album!, windowWidth) : undefined;\n  }, [isAlbum, windowWidth, isOwn, asForwarded, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick}>\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && <p className=\"text-content\">{textParts}</p>}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleBeforeContextMenu : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n        >\n          {withAppendix && (<div className=\"svg-appendix\" ref={appendixRef} />)}\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages, selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  onFabToggle: (show: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_MOBILE_SCREEN ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(!messageIds);\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia, freeze: freezeForMedia, unfreeze: unfreezeForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n\n    if (focusingId) {\n      freezeForMedia();\n      freezeForReading();\n    } else {\n      unfreezeForReading();\n      unfreezeForMedia();\n    }\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP);\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    !withUsers && 'no-avatars',\n    isChannelChat && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div ref={containerRef} className={className} onScroll={handleScroll}>\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          focusingId={focusingId}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId?: number,\n  threadFirstMessageId?: number,\n  hasLinkedChat?: boolean,\n  isSchedule = false,\n  noAppearanceAnimation = false,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        teactFastList\n      >\n        <div className=\"sticky-date\" key=\"date-header\">\n          <span>\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel=\"Scroll to bottom\"\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"8ccc0b555efcec3616377aea078dda16.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && input.tagName === 'INPUT' && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  // Subscribe and handle `window.blur`\n  useEffect(() => {\n    function handleBlur() {\n      if (chatId && threadId) {\n        updateDraft(chatId, threadId);\n      }\n    }\n\n    window.addEventListener('blur', handleBlur);\n\n    return () => {\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [chatId, threadId, updateDraft]);\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_EMOJI_SUPPORTED, IS_VOICE_RECORDING_SUPPORTED, IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showError' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showError,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        if (IS_EMOJI_SUPPORTED) {\n          // Insertion will trigger `onChange` in MessageInput, so no need to setHtml in state\n          document.execCommand('insertText', false, text);\n        } else {\n          insertHtmlInSelection(newHtml);\n          messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n\n        return;\n      }\n\n      setHtml(`${htmlRef.current!}${newHtml}`);\n\n      if (!IS_MOBILE_SCREEN) {\n        // If selection is outside of input, set cursor at the end of input\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput);\n        });\n      }\n    } else {\n      setHtml(`${htmlRef.current!}${newHtml}`);\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_MOBILE_SCREEN) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showError({\n        error: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showError({\n            error: {\n              message: `A wait of ${secondsRemaining} seconds is required before sending another message in this chat`,\n              isSlowMode: true,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000);\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    activeVoiceRecording, attachments, connectionState, chatId, slowMode, isForwarding, isAdmin,\n    sendMessage, stopRecordingVoice, resetComposer, clearDraft, showError, forwardMessages,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000));\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_MOBILE_SCREEN || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_MOBILE_SCREEN) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const lang = useLang();\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'Send message';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Posting media content is not allowed in this group.'\n        : 'Record a voice message';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_MOBILE_SCREEN ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSupressFocus={IS_MOBILE_SCREEN && isSymbolMenuOpen}\n            shouldSupressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={mainButtonState === MainButtonState.Edit\n              ? handleEditComplete\n              : (shouldSchedule ? openCalendar : handleSend)}\n            onSupressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={sendButtonAriaLabel}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showError',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n} from '../../config';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV, MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  customBackground?: string;\n  patternColor?: string;\n  isCustomBackgroundColor?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_MOBILE_SCREEN ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  patternColor,\n  isCustomBackgroundColor,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const customBackgroundValue = useCustomBackground(customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && !isCustomBackgroundColor && 'custom-bg-image',\n    customBackground && isCustomBackgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n      `}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                  />\n                  <div className={buildClassName('middle-column-footer', !renderingCanPost && 'no-composer')}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\">\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_MOBILE_SCREEN && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { isBackgroundBlurred, customBackground, patternColor } = global.settings.byKey;\n\n    const isCustomBackgroundColor = Boolean((customBackground || '').match(/^#[a-f\\d]{6,8}$/i));\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds } } = global;\n\n    const state: StateProps = {\n      customBackground,\n      patternColor,\n      isCustomBackgroundColor,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_MOBILE_SCREEN && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_MOBILE_SCREEN),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { useEffect, useState } from '../lib/teact/teact';\n\nexport default (settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, CUSTOM_BG_CACHE_NAME, cacheApi.Type.Blob)\n        .then((blob) => {\n          setValue(`url(${URL.createObjectURL(blob)}`);\n        });\n    }\n  }, [settingValue]);\n\n  return value;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal.async';\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'searchMessagesByDate'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  searchMessagesByDate,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeCalendar();\n  }, [closeCalendar, searchMessagesByDate]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={openCalendar}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_MOBILE_SCREEN\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    shouldSkipTransition && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n      {!IS_MOBILE_SCREEN && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          isPastMode\n          submitButtonLabel={lang('JumpToDate')}\n          onClose={closeCalendar}\n          onSubmit={handleJumpToDate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'searchMessagesByDate',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById);\n  }, [groupChatMembers, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\">{getUserStatus(user, lang)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\">\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\">\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3>{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3>{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    isMuted: currentIsMuted,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !currentIsMuted });\n  }, [chatId, currentIsMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\">{renderText(description, ['br', 'links', 'emoji'])}</span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!currentIsMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div className={`content ${resultType}-list`} teactFastList>\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              renderingFor=\"sharedMedia\"\n              message={chatMessages[id]}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name=\"slide\"\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback(() => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo();\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ErrorsAsync: FC = ({ isOpen }) => {\n  const Errors = useModuleLoader(Bundles.Extra, 'Errors', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Errors ? <Errors /> : undefined;\n};\n\nexport default memo(ErrorsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, useEffect, memo } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Errors from './Errors.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasErrors: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadAnimatedEmojis'>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  loadAnimatedEmojis,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasErrors,\n  audioMessage,\n  safeLinkModalUrl,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAnimatedEmojis();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n    // For animating components in portals (i.e. Notification)\n    document.body.classList.toggle('is-right-column-shown', className.includes('right-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  useBackgroundMode(() => {\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, () => {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  });\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Errors isOpen={hasErrors} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasErrors: Boolean(global.errors.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadAnimatedEmojis']),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}