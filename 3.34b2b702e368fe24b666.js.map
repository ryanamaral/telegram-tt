{"version":3,"sources":["webpack:///./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack:///./src/components/mediaViewer/SenderInfo.tsx","webpack:///./src/components/mediaViewer/MediaViewerActions.tsx","webpack:///./src/components/mediaViewer/MediaViewerFooter.tsx","webpack:///./src/hooks/useFullscreen.ts","webpack:///./src/components/mediaViewer/helpers/formatFileSize.ts","webpack:///./src/components/mediaViewer/VideoPlayerControls.tsx","webpack:///./src/components/mediaViewer/VideoPlayer.tsx","webpack:///./src/components/mediaViewer/ZoomControls.tsx","webpack:///./src/components/mediaViewer/PanZoom.tsx","webpack:///./src/components/mediaViewer/MediaViewer.tsx","webpack:///./src/components/main/ForwardPicker.tsx","webpack:///./src/components/main/Errors.tsx","webpack:///./src/components/main/Notifications.tsx","webpack:///./src/components/common/CalendarModal.tsx","webpack:///./src/components/common/DeleteMessageModal.tsx","webpack:///./src/components/common/PinMessageModal.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.tsx","webpack:///./src/components/middle/DeleteSelectedMessagesModal.tsx","webpack:///./src/components/middle/MessageSelectToolbar.tsx","webpack:///./src/components/left/search/LeftSearchResultChat.tsx","webpack:///./src/components/left/search/RecentContacts.tsx","webpack:///./src/components/left/search/ChatMessage.tsx","webpack:///./src/components/left/search/DateSuggest.tsx","webpack:///./src/components/left/search/ChatResults.tsx","webpack:///./src/components/left/search/ChatMessageResults.tsx","webpack:///./src/components/left/search/helpers/createMapStateToProps.ts","webpack:///./src/components/left/search/MediaResults.tsx","webpack:///./src/components/left/search/helpers/getSenderName.ts","webpack:///./src/components/left/search/LinkResults.tsx","webpack:///./src/components/left/search/FileResults.tsx","webpack:///./src/components/left/search/AudioResults.tsx","webpack:///./src/components/left/search/LeftSearch.tsx","webpack:///./src/hooks/useReducer.ts","webpack:///./src/hooks/reducers/useFoldersReducer.ts","webpack:///./src/hooks/reducers/useTwoFaReducer.ts","webpack:///./src/components/left/settings/SettingsHeader.tsx","webpack:///./src/components/left/settings/SettingsMain.tsx","webpack:///./src/components/ui/FloatingActionButton.tsx","webpack:///./src/components/common/UsernameInput.tsx","webpack:///./src/components/left/settings/SettingsEditProfile.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack:///./src/components/ui/ShowMoreButton.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack:///./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack:///./src/components/left/settings/folders/SettingsFolders.tsx","webpack:///./src/components/ui/RangeSlider.tsx","webpack:///./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack:///./src/components/middle/composer/StickerSetCover.tsx","webpack:///./src/components/common/StickerButton.tsx","webpack:///./src/components/left/settings/SettingsStickerSet.tsx","webpack:///./src/components/left/settings/SettingsGeneral.tsx","webpack:///./src/util/systemFilesDialog.ts","webpack:///./src/util/colors.ts","webpack:///./src/components/left/settings/WallpaperTile.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackground.tsx","webpack:///./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack:///./src/components/left/settings/SettingsNotifications.tsx","webpack:///./src/components/left/settings/SettingsPrivacy.tsx","webpack:///./src/components/left/settings/SettingsLanguage.tsx","webpack:///./src/components/left/settings/helper/privacy.ts","webpack:///./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack:///./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack:///./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack:///./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack:///./src/components/common/Picker.tsx","webpack:///./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack:///./src/components/left/settings/Settings.tsx","webpack:///./src/components/left/main/ContactList.tsx","webpack:///./src/components/left/newChat/NewChatStep1.tsx","webpack:///./src/components/left/newChat/NewChatStep2.tsx","webpack:///./src/components/left/newChat/NewChat.tsx","webpack:///./src/components/left/ArchivedChats.tsx","webpack:///./src/util/scrollLock.ts","webpack:///./src/components/middle/message/helpers/copyOptions.ts","webpack:///./src/components/middle/message/MessageContextMenu.tsx","webpack:///./src/components/middle/message/ContextMenuContainer.tsx","webpack:///./src/components/common/StickerSetModal.tsx","webpack:///./src/components/middle/HeaderMenuContainer.tsx","webpack:///./src/components/middle/MobileSearch.tsx","webpack:///./src/util/findInViewport.ts","webpack:///./src/util/isFullyVisible.ts","webpack:///./src/components/middle/composer/MentionTooltip.tsx","webpack:///./src/components/middle/composer/AttachmentModal.tsx","webpack:///./src/components/middle/composer/PollModal.tsx","webpack:///./src/hooks/useMouseInside.ts","webpack:///./src/components/middle/composer/EmojiButton.tsx","webpack:///./src/components/middle/composer/EmojiCategory.tsx","webpack:///./src/components/middle/composer/EmojiPicker.tsx","webpack:///./src/components/middle/composer/StickerSet.tsx","webpack:///./src/components/middle/composer/StickerPicker.tsx","webpack:///./src/components/common/GifButton.tsx","webpack:///./src/components/middle/composer/GifPicker.tsx","webpack:///./src/components/middle/composer/SymbolMenuFooter.tsx","webpack:///./src/components/middle/composer/SymbolMenu.tsx","webpack:///./src/components/middle/composer/AttachMenu.tsx","webpack:///./src/components/middle/composer/StickerTooltip.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.tsx","webpack:///./src/components/right/RightSearch.tsx","webpack:///./src/components/right/StickerSetResult.tsx","webpack:///./src/components/right/StickerSearch.tsx","webpack:///./src/components/right/GifSearch.tsx","webpack:///./src/components/right/PollAnswerResults.tsx","webpack:///./src/components/right/PollResults.tsx","webpack:///./src/components/right/management/ManageUser.tsx","webpack:///./src/components/right/management/ManageGroup.tsx","webpack:///./src/components/right/management/ManageGroupPermissions.tsx","webpack:///./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack:///./src/components/right/management/ManageChannel.tsx","webpack:///./src/components/right/management/ManageChatPrivacyType.tsx","webpack:///./src/components/right/management/ManageDiscussion.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissions.tsx","webpack:///./src/components/right/management/ManageChatAdministrators.tsx","webpack:///./src/components/right/management/ManageGroupRecentActions.tsx","webpack:///./src/components/right/management/ManageGroupAdminRights.tsx","webpack:///./src/components/right/management/ManageGroupMembers.tsx","webpack:///./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack:///./src/components/right/management/Management.tsx","webpack:///./src/components/middle/helpers/getCurrencySign.ts","webpack:///./src/components/common/helpers/detectCardType.ts","webpack:///./src/hooks/reducers/usePaymentReducer.ts","webpack:///./src/hooks/useFocusAfterAnimation.tsx","webpack:///./src/components/ui/Select.tsx","webpack:///./src/components/payment/ShippingInfo.tsx","webpack:///./src/components/payment/Shipping.tsx","webpack:///./src/components/payment/Checkout.tsx","webpack:///./src/components/payment/ExpiryInput.tsx","webpack:///./src/components/middle/helpers/inputFormatters.ts","webpack:///./src/assets/mastercard.svg","webpack:///./src/assets/visa.svg","webpack:///./src/components/payment/CardInput.tsx","webpack:///./src/components/payment/PaymentInfo.tsx","webpack:///./src/components/payment/PaymentModal.tsx","webpack:///./src/components/payment/ReceiptModal.tsx","webpack:///./src/components/common/helpers/animatedAssets.ts","webpack:///./src/assets/TwoFactorSetupMonkeyIdle.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyTracking.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyClose.tgs","webpack:///./src/assets/TwoFactorSetupMonkeyPeek.tgs","webpack:///./src/assets/FoldersAll.tgs","webpack:///./src/assets/FoldersNew.tgs","webpack:///./src/assets/DiscussionGroupsDucks.tgs","webpack:///./src/components/ui/CropModal.tsx","webpack:///./src/components/ui/AvatarEditable.tsx","webpack:///./src/components/common/PasswordMonkey.tsx","webpack:///./src/components/common/PasswordForm.tsx"],"names":["animateOpening","hasFooter","origin","bestImageData","message","mediaEl","fromImage","getNodes","width","windowWidth","windowSize","get","mediaSize","isVideo","photo","video","webPage","getMessageContent","Boolean","getVideoDimensions","getPhotoFullDimensions","AVATAR_FULL_DIMENSIONS","availableWidth","height","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","mql","window","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","topOffsetRem","matches","REM","getTopOffset","top","fromTop","left","fromLeft","fromWidth","fromHeight","getBoundingClientRect","MediaViewerOrigin","SharedMedia","Album","ScheduledAlbum","SearchResult","includes","uncovered","realWidth","realHeight","size","Math","max","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","ghost","createGhost","applyStyles","transform","applyShape","document","body","classList","add","requestAnimationFrame","appendChild","style","firstChild","objectFit","remove","clearShape","setTimeout","removeChild","ANIMATION_END_DELAY","animateClosing","container","toImage","getElementById","querySelector","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","Inline","ScheduledInline","isMessageImageFullyVisible","ProfileAvatar","opacity","source","shouldAppendProfileInfo","createElement","img","Image","src","HTMLVideoElement","poster","profileInfo","cloneNode","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","parentElement","scrollTop","offsetHeight","element","styles","Object","assign","containerSelector","mediaSelector","MiddleHeaderAvatar","mediaEls","querySelectorAll","length","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","chat","user","renderText","formatMediaDateTime","date","MediaViewerActions","mediaData","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isVideoDownloadAllowed","setIsVideoDownloadAllowed","useState","videoMediaHash","getMessageMediaHash","undefined","videoBlobUrl","downloadProgress","useMediaWithDownloadProgress","useEffect","download","handleVideoDownloadClick","e","stopPropagation","isAllowed","lang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_MOBILE_SCREEN","DropdownMenu","trigger","positionX","MenuItem","icon","href","ProgressSpinner","progress","noCross","MediaViewerFooter","text","isHideable","isMultiline","setIsMultiline","footerContent","checkIsMultiline","clientHeight","handleResize","throttle","addEventListener","removeEventListener","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getBrowserFullscreenElementProp","units","bytes","number","floor","log","toFixed","stopEvent","VideoPlayerControls","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","timeout","clearTimeout","downloadedPercent","totalSize","percentagePlayed","percentageBuffered","min","step","type","onInput","value","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","useRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","current","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","pause","safePlay","togglePlayState","play","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","handleSeek","Number","target","toggleControls","togglePayingStateBySpace","wrapperStyle","videoStyle","onMouseOver","onMouseOut","ref","autoPlay","playsInline","loop","muted","onEnded","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","isSeeking","handleStartSeek","handleStopSeek","buildClassName","disabled","onChange","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","1","1.5","2","2.5","3","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","toString","preventDefault","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","webPagePhoto","getMessageWebPagePhoto","getMessagePhoto","getMessageVideo","isWebPagePhoto","isPhoto","isFromSharedMedia","isFromSearch","slideAnimation","headerAnimation","isGhostAnimation","getMessageMediaFilename","prevSenderId","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","getMediaHash","full","photos","getChatAvatarHash","blobUrlPictogram","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","blobUrlPreview","startsWith","DataUri","fullMediaData","getMessageMediaFormat","localBlobUrl","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","photoDimensions","videoDimensions","toggle","forceUpdate","useForceUpdate","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","textParts","renderMessageText","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","captureEvents","excludedClosestSelector","onSwipe","SwipeDirection","Right","Left","handlePan","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","ShowTransition","Transition","activeKey","name","aria-label","chats","byId","chatsById","listIds","currentUserId","activeListIds","active","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","modalHeader","InputText","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","errors","dismissError","title","getReadableErrorText","isText","notifications","dismissNotification","Notification","onDismiss","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","selectedDate","setSelectedDate","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","currentDate","shouldDisableNextMonth","shouldDisablePrevMonth","calendarGrid","grid","setFullYear","setMonth","setDate","monthStartDay","getDay","i","push","gridDate","buildCalendarGrid","handleChangeHours","replace","hours","getTime","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","formatMonthAndYear","d","dateCopy","letter","role","tabIndex","handleDateSelect","inputMode","formatHumanDate","formatTime","formatSubmitLabel","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChannel","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedIds","selectPinnedIds","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","messageListType","canDelete","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","withUsername","contextActions","useChatContextActions","handleDelete","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","handleClick","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","onSelect","suggestions","match","formatDateToString","suggestion","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","Backwards","query","handleChatClick","handlePickerItemClick","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","getTranslation","unique","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","isLoading","searchChatId","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","classNames","itemSelector","Media","idPrefix","getSenderName","senderName","isChatGroup","handleMessageFocus","shouldDrawDateDivider","toYearMonth","WebLink","onMessageClick","getMessageDocument","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","renderingFor","onPlay","TABS","GlobalSearchContent","ChatList","Links","Files","Music","Voice","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","useReducer","reducer","initialState","reducerRef","state","setState","action","currentState","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","INCLUDE_FILTER_FIELDS","EXCLUDE_FILTER_FIELDS","selectChatFilters","mode","selectTemp","selectedChatIds","selectedChatTypes","includedChatIds","includeFilters","folder","excludedChatIds","excludeFilters","getSuggestedFolderName","filters","values","bots","groups","channels","contacts","nonContacts","INITIAL_STATE","chatFilter","foldersReducer","payload","isTouched","omit","folderId","description","currentPassword","password","hint","email","twoFaReducer","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","EditProfile","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","Folders","FoldersCreateFolder","FoldersEditFolder","FoldersIncludedChats","FoldersExcludedChats","renderHeaderContent","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","currentUser","onScreenSelect","formatPhoneNumberWithCode","phoneNumber","FloatingActionButton","buttonClassName","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","label","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showError","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","userFolders","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","noLoop","onLoad","pill","fluid","narrow","multiline","ShowMoreButton","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","find","typeKey","inactive","renderChatType","event","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","orderedPinnedIds","archivedPinnedIds","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","handleSelectedChatTypesChange","newFilters","forEach","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","options","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","Lottie","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","sticker","noAnimate","onUnfaveClick","localMediaHash","stickerSelector","thumbnail","dataUri","previewBlobUrl","shouldPlay","isAnimated","markLoaded","unmarkLoaded","canAnimatedPlay","shouldRenderThumb","shouldRenderPreview","previewTransitionClassNames","fullClassName","emoji","data-sticker-id","isLowPriority","stickers","firstSticker","STICKER_SIZE_GENERAL_SETTINGS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","handleStickerSetClick","stickerSets","installedDate","RadioGroup","selected","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","setAttribute","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","useBlur","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","handleSelect","blob","fetchBlob","cacheApi","CUSTOM_BG_CACHE_NAME","isBackgroundBlurred","customBackground","loadedWallpapers","loadWallpapers","uploadWallpaper","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","patternColor","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","data","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","containerRef","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","onCapture","onDrag","onRelease","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","data-color","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","loadNotificationsSettings","updateContactSignUpNotification","updateNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentIsShowPreviews","isShowPreviews","handleContactNotificationChange","hasPassword","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","hash","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","renderSession","handler","dateActive","appName","ip","sessions","chatsByIds","usersByIds","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","code","itemIds","filterPlaceholder","notFoundText","searchInputId","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","foldersState","foldersDispatch","twoFaState","twoFaDispatch","handleSaveFilter","renderCurrentSection","Main","renderCurrentSectionContent","contactIds","resultIds","sortUserIds","forceShowSelf","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","NewChannelStep1","NewGroupStep1","folderType","noChatsText","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","ArrowLeft","ArrowRight","PageUp","PageDown","End","Home","Tab","preventDefaultForScrollKeys","disableScrolling","passive","ontouchmove","onkeydown","enableScrolling","getCopyLabel","hasSelection","canImageBeCopied","MessageContextMenu","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCloseAnimationEnd","onCopyLink","copyOptions","afterEffect","getMessageText","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","useContextMenuPosition","Menu","noOptions","isScheduled","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadMessageLink","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","scheduledMaxDate","getDayStartAt","selectStickerSet","stickerSetId","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","isMuted","canDeleteChat","getCanDeleteChat","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","handleToggleMuteClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","searchMessagesByDate","focusedIndex","setFocusedIndex","visualViewport","mainEl","activeElement","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleJumpToDate","timestamp","valueOf","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","isFullyVisible","onInsertUserName","filteredChatMembers","getSelectedIndex","newIndex","cycleRestrict","selectedMentionIndex","setSelectedMentionIndex","handleArrowKey","handleUserSelect","forceFocus","handleSelectMention","member","onUp","onDown","onTab","first","position","fastSmoothScroll","setItemVisible","prevChatMembers","renderedChatMembers","attachments","caption","canSuggestMembers","groupChatMembers","recentEmojis","onCaptionUpdate","addRecentEmoji","onClear","prevAttachments","renderingAttachments","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","areAllPhotos","every","mimeType","areAllVideos","isQuick","quick","renderHeader","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollHeight","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","closeTimeout","useMouseInside","menuCloseTimeout","isMouseInside","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","canSendStickers","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","gif","videoData","shouldRenderVideo","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","fastRaf","recentEmojisRef","renderContent","isFrom","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","CONTENT_TYPES_FOR_QUICK_UPLOAD","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","clickInlineButton","keyboardButtons","row","button","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","selectedIndex","setSelectedIndex","emojisCount","handleSelectEmoji","onLeft","onRight","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","getAllowedAttachmentOptions","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","noStatusOrTyping","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","currentIsMuted","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","lastMessage","maxId","withFullInfo","hasLinkedChannel","linkedChatId","isBasicGroup","canChangeInfo","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickPermissions","GroupPermissions","handleClickAdministrators","ChatAdministrators","handleSetPhoto","file","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","isCreator","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","promotedByUserId","GroupUserPermissions","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","isSignaturesShown","toggleSignatures","hasLinkedChat","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","Initial","handleLinkGroupSessions","renderLinkGroupHeader","linkedGroup","renderLinkGroupConfirmText","hasPrivateLink","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","ChatAdminRights","getMemberStatus","promotedByUser","GroupRecentActions","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","substr","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","CURRENCIES","USD","EUR","GBP","JPY","RUB","UAH","INR","AED","getCurrencySign","currency","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","getBillingCountry","countryCode","countryList","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","amount","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","item","expiryInputRef","charAt","parts","formatCardExpiry","onKeyDown","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","globalErrors","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","currencySign","field","fieldError","getShippingError","handleErrorModalClose","PaymentStep","Checkout","shippingOption","getShippingPrices","totalPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","ShippingInfo","Shipping","PaymentInfo","buttonText","cuurentStep","renderModalContent","renderError","optionId","receipt","mapedPrices","info","totalAmount","credentialsTitle","fullAddress","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH"],"mappings":"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","file":"3.34b2b702e368fe24b666.js","sourcesContent":["import { ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport { getMessageContent, getPhotoFullDimensions, getVideoDimensions } from '../../../modules/helpers';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean, origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n\n  let isVideo = false;\n  let mediaSize;\n  if (message) {\n    const { photo, video, webPage } = getMessageContent(message);\n    isVideo = Boolean(video);\n    mediaSize = video ? getVideoDimensions(video)! : getPhotoFullDimensions((photo || webPage!.photo)!)!;\n  } else {\n    mediaSize = AVATAR_FULL_DIMENSIONS;\n  }\n\n  // eslint-disable-next-line max-len\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, mediaSize.width, mediaSize.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          document.body.removeChild(ghost);\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const ghost = createGhost(bestImageData || toImage, origin === MediaViewerOrigin.ProfileAvatar);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n\n  requestAnimationFrame(() => {\n    document.body.classList.add('ghost-animating');\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          document.body.removeChild(ghost);\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, shouldAppendProfileInfo = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (shouldAppendProfileInfo) {\n    ghost.classList.add('ProfileInfo');\n    const profileInfo = document.querySelector('#RightColumn .ProfileInfo .info');\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls && mediaEls[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\">\n          {isAvatar ? 'Profile photo' : formatMediaDateTime(message!.date * 1000)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, {\n  FC, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport download from '../../util/download';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const [isVideoDownloadAllowed, setIsVideoDownloadAllowed] = useState(false);\n  const videoMediaHash = isVideo && message ? getMessageMediaHash(message, 'download') : undefined;\n  const {\n    mediaData: videoBlobUrl, downloadProgress,\n  } = useMediaWithDownloadProgress(videoMediaHash, !isVideoDownloadAllowed);\n\n  // Download with browser when fully loaded\n  useEffect(() => {\n    if (isVideoDownloadAllowed && videoBlobUrl) {\n      download(videoBlobUrl, fileName!);\n      setIsVideoDownloadAllowed(false);\n    }\n  }, [fileName, videoBlobUrl, isVideoDownloadAllowed]);\n\n  // Cancel download on slide change\n  useEffect(() => {\n    setIsVideoDownloadAllowed(false);\n  }, [videoMediaHash]);\n\n  const handleVideoDownloadClick = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    setIsVideoDownloadAllowed((isAllowed) => !isAllowed);\n  }, []);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_MOBILE_SCREEN) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isVideoDownloadAllowed ? 'close' : 'download'}\n              onClick={handleVideoDownloadClick}\n            >\n              {isVideoDownloadAllowed ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isVideoDownloadAllowed && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleVideoDownloadClick}\n        >\n          {isVideoDownloadAllowed ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleVideoDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHideable: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({ text = '', isHideable, onClick }) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  return (\n    <div className={`MediaViewerFooter ${isHideable ? 'hideable' : ''}`} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={onClick}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`}>{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, { FC, useState, useEffect } from '../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: OnChangeHandler;\n};\n\ntype OnChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => void;\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_MOBILE_SCREEN) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, onSeek)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(currentTime: number, duration: number, bufferedProgress: number, onSeek: OnChangeHandler) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\">\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n        <input\n          min=\"0\"\n          max=\"100\"\n          step={0.01}\n          type=\"range\"\n          onInput={onSeek}\n          className=\"player-seekline-input\"\n          value={percentagePlayed || 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IDimensions } from '../../modules/helpers';\n\nimport { IS_IOS, IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: IDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      videoRef.current!.play();\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    e.stopPropagation();\n\n    videoRef.current!.currentTime = (Number(e.target.value) * videoRef.current!.duration) / 100;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_MOBILE_SCREEN ? toggleControls : undefined}\n      onMouseOver={!isGif ? handleMouseOver : undefined}\n      onMouseOut={!isGif ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onEnded={handleEnded}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={!isPlayed || isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_MOBILE_SCREEN}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_MOBILE_SCREEN}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageMediaFilename,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  IDimensions,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const animationKey = useRef<number>(null);\n  const isOpen = Boolean(avatarOwner || messageId);\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const isWebPagePhoto = Boolean(webPagePhoto);\n  const isPhoto = Boolean(photo || webPagePhoto);\n  const isVideo = Boolean(video);\n  const isGif = video ? video.isGif : undefined;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n  const fileName = avatarOwner\n    ? `avatar${avatarOwner.id}-${profilePhotoIndex}.jpg`\n    : message && getMessageMediaFilename(message);\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  const messageIds = useMemo(() => {\n    return isWebPagePhoto && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isWebPagePhoto, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n\n  function getMediaHash(full?: boolean) {\n    if (avatarOwner && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner, full ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, full ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const blobUrlPictogram = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const blobUrlPreview = useMedia(\n    previewMediaHash,\n    undefined,\n    avatarOwner && previewMediaHash && previewMediaHash.startsWith('profilePhoto')\n      ? ApiMediaFormat.DataUri\n      : ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaData)) || blobUrlPreview || blobUrlPictogram;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const photoDimensions = isPhoto ? getPhotoFullDimensions((\n    isWebPagePhoto ? getMessageWebPagePhoto(message!) : getMessagePhoto(message!)\n  )!) : undefined;\n  const videoDimensions = isVideo ? getVideoDimensions(getMessageVideo(message!)!) : undefined;\n\n  useEffect(() => {\n    if (!IS_MOBILE_SCREEN) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin,\n    message, prevMessage, prevAvatarOwner, bestImageData, prevBestImageData,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else {\n          close();\n        }\n      } : undefined,\n    });\n  }, [close, isGif, isZoomed, selectNextMedia, selectPreviousMedia, canPanZoomWrap]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const lang = useLang();\n\n  function renderSlide(isActive: boolean) {\n    if (avatarOwner) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaData || blobUrlPreview,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_MOBILE_SCREEN && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div key={messageId} className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}>\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaData || blobUrlPreview || blobUrlPictogram,\n            message && calculateMediaViewerDimensions(photoDimensions!, hasFooter),\n            !IS_MOBILE_SCREEN && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaData}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(videoDimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={video!.size}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHideable={isVideo}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return (\n      <SenderInfo\n        key={avatarOwner ? avatarOwner.id : messageId}\n        chatId={avatarOwner ? avatarOwner.id : chatId}\n        messageId={messageId}\n        isAvatar={Boolean(avatarOwner)}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\">\n            {IS_MOBILE_SCREEN && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaData || blobUrlPreview}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={Boolean(avatarOwner)}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: IDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_MOBILE_SCREEN) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...activeListIds || [],\n      ...archivedListIds || [],\n    ];\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, currentUserId ? [currentUserId] : undefined);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  const lang = useLang();\n\n  const modalHeader = (\n    <div className=\"modal-header\">\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Errors.scss';\n\ntype StateProps = {\n  errors: ApiError[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissError'>;\n\nconst Errors: FC<StateProps & DispatchProps> = ({ errors, dismissError }) => {\n  const lang = useLang();\n\n  if (!errors.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Errors\">\n      {errors.map((error) => (\n        <Modal\n          isOpen\n          onClose={dismissError}\n          className=\"error\"\n          title={getErrorHeader(error)}\n        >\n          <p>{getReadableErrorText(error)}</p>\n          <Button isText onClick={dismissError}>{lang('OK')}</Button>\n        </Modal>\n      ))}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['errors']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissError']),\n)(Errors));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\nimport renderText from '../common/helpers/renderText';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links'])}\n          onDismiss={dismissNotification}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport {\n  formatMonthAndYear, formatHumanDate, formatTime,\n} from '../../util/dateFormat';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n  const currentDate = selectedDate.getDate();\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedDate(defaultSelectedDate);\n    }\n  }, [isOpen, defaultSelectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const calendarGrid = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {formatMonthAndYear(selectedDate, IS_MOBILE_SCREEN)}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((letter) => (\n            <div className=\"day-button faded weekday\">\n              <span>{letter}</span>\n            </div>\n          ))}\n          {calendarGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                gridDate === currentDate && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const grid: number[] = [];\n\n  const date = new Date();\n  date.setFullYear(year);\n  date.setMonth(month);\n  date.setDate(1);\n\n  const monthStartDay = date.getDay();\n  // Fill empty cells\n  for (let i = 1; i < monthStartDay; i++) {\n    grid.push(0);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    grid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  return grid;\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatSubmitLabel(date: Date) {\n  const day = formatHumanDate(date, true);\n\n  return `Send ${day === 'Today' ? day : `on ${day}`} at ${formatTime(date)}`;\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album && album.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete it just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete it for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          Delete for {contactName ? 'me and ' : 'Everyone'}\n          {contactName && renderText(contactName)}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        Delete{canDeleteForAll ? ' just for me' : ''}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderModalHeader() {\n    return (\n      <div className=\"modal-header\">\n        <h3 className=\"modal-title\">{lang('PinMessageAlertTitle')}</h3>\n      </div>\n    );\n  }\n\n  function renderMessage() {\n    if (isChannel) {\n      return <p>{lang('PinMessageAlertChannel')}</p>;\n    }\n\n    if (isGroup || isSuperGroup) {\n      return <p>{lang('PinMessageAlert')}</p>;\n    }\n\n    return <p>{lang('PinMessageAlertChat')}</p>;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      header={renderModalHeader()}\n    >\n      {renderMessage()}\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName ? `Pin for me and ${contactName}` : 'Pin and notify all memebers'}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { selectPinnedIds } from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\ntype StateProps = {\n  pinnedMessagesCount: number;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  pinnedMessagesCount,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  function renderModalHeader() {\n    return (\n      <div className=\"modal-header\">\n        <h3 className=\"modal-title\">{lang('UnpinAllMessages')}</h3>\n      </div>\n    );\n  }\n\n  function renderMessage() {\n    return <p>Do you want to unpin all {pinnedMessagesCount} messages in this chat?</p>;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      header={renderModalHeader()}\n    >\n      {renderMessage()}\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const pinnedIds = chatId ? selectPinnedIds(global, chatId) : [];\n\n    return {\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n    };\n  },\n)(UnpinAllMessagesModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessagesModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n    exitMessageSelectMode();\n    onClose();\n  }, [deleteMessages, exitMessageSelectMode, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    exitMessageSelectMode();\n    onClose();\n  }, [\n    isSchedule, exitMessageSelectMode, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages,\n  ]);\n\n  const lang = useLang();\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title=\"Delete Messages?\"\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          Delete for {contactName ? 'me and ' : 'Everyone'}\n          {contactName && renderText(contactName)}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        Delete{canDeleteForAll ? ' just for me' : ''}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessagesModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessagesModal from './DeleteSelectedMessagesModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount);\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessagesModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId } from '../../../modules/helpers';\nimport { selectChat, selectUser, selectIsChatPinned } from '../../../modules/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    handleDelete: openDeleteModal,\n  });\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={() => onClick(chatId)}\n      contextActions={contextActions}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\">\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\">\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  useLang();\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_MOBILE_SCREEN}\n      onClick={handleClick}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser && privateChatUser.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3>{renderText(getChatTitle(chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\">\n            {renderMessageSummary(message, mediaBlobUrl || mediaThumbnail, searchQuery)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(message: ApiMessage, blobUrl?: string, searchQuery?: string) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport { getTranslation } from '../../../util/langProvider';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_MOBILE_SCREEN) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(getTranslation('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [searchQuery, localContactIds, currentUserId, localChatIds, localUserIds, chatsById, usersById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]), chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  const lang = useLang();\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && <NothingFound />}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\">\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>{shouldShowMoreLocal ? 'Show less' : 'Show more'}</Link>\n            )}\n            Contacts and Chats\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\">\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>{shouldShowMoreGlobal ? 'Show less' : 'Show more'}</Link>\n            )}\n            Global Search\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\">{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const { currentUserId, messages, lastSyncTime } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return (\n          globalMessagesByChatId && globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId]\n        );\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && <NothingFound />}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType && resultsByType.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\n\nexport type StateProps = {\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props && props.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const { foundIds } = (resultsByType && resultsByType[currentType]) || {};\n\n    return {\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\">\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && <NothingFound />}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport {\n  getChatTitle,\n  getSenderTitle,\n  isChatPrivate,\n  isChatGroup,\n} from '../../../../modules/helpers';\n\nexport function getSenderName(\n  message: ApiMessage, chatsById: Record<number, ApiChat>, usersById: Record<number, ApiUser>,\n) {\n  const { senderId } = message;\n  if (!senderId) {\n    return undefined;\n  }\n\n  const sender = isChatPrivate(senderId) ? usersById[senderId] : chatsById[senderId];\n\n  let senderName = getSenderTitle(sender);\n\n  const chat = chatsById[message.chatId];\n  if (chat) {\n    if (isChatPrivate(senderId) && (sender as ApiUser).isSelf) {\n      senderName = `You → ${getChatTitle(chat)}`;\n    } else if (isChatGroup(chat)) {\n      senderName += ` → ${getChatTitle(chat)}`;\n    }\n  }\n\n  return senderName;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(new Date(message.date * 1000))}</p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && <NothingFound />}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && <NothingFound />}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId] && globalMessagesByChatId[chatId].byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(new Date(message.date * 1000))}</p>\n          )}\n          <Audio\n            key={message.id}\n            message={message}\n            renderingFor=\"searchResult\"\n            senderTitle={getSenderName(message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && <NothingFound />}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const [activeTab, setActiveTab] = useState(0);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  return (\n    <div className=\"LeftSearch\">\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition name=\"slide\" renderCount={TRANSITION_RENDER_COUNT} activeKey={currentContent}>\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import { useState, useCallback, useRef } from '../lib/teact/teact';\n\nexport type ReducerAction<Actions> = { type: Actions; payload?: any };\nexport type StateReducer<State, Actions> = (state: State, action: ReducerAction<Actions>) => State;\nexport type Dispatch<Actions> = (action: ReducerAction<Actions>) => void;\n\nexport default function useReducer<State, Actions>(\n  reducer: StateReducer<State, Actions>,\n  initialState: State,\n) {\n  const reducerRef = useRef(reducer);\n  const [state, setState] = useState<State>(initialState);\n\n  const dispatch = useCallback((action: ReducerAction<Actions>) => {\n    setState((currentState) => reducerRef.current(currentState, action));\n  }, []);\n\n  return [\n    state,\n    dispatch,\n  ] as [State, Dispatch<Actions>];\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { ApiChatFolder } from '../../api/types';\nimport { pick, omit } from '../../util/iteratees';\n\nexport type FolderChatType = {\n  icon: string;\n  title: string;\n  key: keyof Pick<ApiChatFolder, (\n    'contacts' | 'nonContacts' | 'groups' | 'channels' | 'bots' |\n    'excludeMuted' | 'excludeArchived' | 'excludeRead'\n  )>;\n};\n\nexport const INCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'user', title: 'FilterContacts', key: 'contacts' },\n  { icon: 'non-contacts', title: 'FilterNonContacts', key: 'nonContacts' },\n  { icon: 'group', title: 'FilterGroups', key: 'groups' },\n  { icon: 'channel', title: 'FilterChannels', key: 'channels' },\n  { icon: 'bots', title: 'FilterBots', key: 'bots' },\n];\n\nexport const EXCLUDED_CHAT_TYPES: FolderChatType[] = [\n  { icon: 'mute', title: 'FilterMuted', key: 'excludeMuted' },\n  { icon: 'archive', title: 'FilterArchived', key: 'excludeArchived' },\n  { icon: 'readchats', title: 'FilterRead', key: 'excludeRead' },\n];\n\nconst INCLUDE_FILTER_FIELDS: Array<keyof FolderIncludeFilters> = [\n  'includedChatIds', 'bots', 'channels', 'groups', 'contacts', 'nonContacts',\n];\nconst EXCLUDE_FILTER_FIELDS: Array<keyof FolderExcludeFilters> = [\n  'excludedChatIds', 'excludeArchived', 'excludeMuted', 'excludeRead',\n];\n\nexport function selectChatFilters(state: FoldersState, mode: 'included' | 'excluded', selectTemp?: boolean) {\n  let selectedChatIds: number[] = [];\n  let selectedChatTypes: FolderChatType['key'][] = [];\n\n  if (mode === 'included') {\n    const {\n      includedChatIds,\n      ...includeFilters\n    } = selectTemp\n      ? state.includeFilters || {}\n      : pick(\n        state.folder,\n        INCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = includedChatIds || [];\n    selectedChatTypes = (Object.keys(includeFilters) as Array<keyof typeof includeFilters>)\n      .filter((key) => Boolean(includeFilters[key]));\n  } else {\n    const {\n      excludedChatIds,\n      ...excludeFilters\n    } = selectTemp\n      ? state.excludeFilters || {}\n      : pick(\n        state.folder,\n        EXCLUDE_FILTER_FIELDS,\n      );\n\n    selectedChatIds = excludedChatIds || [];\n    selectedChatTypes = (Object.keys(excludeFilters) as Array<keyof typeof excludeFilters>)\n      .filter((key) => Boolean(excludeFilters[key]));\n  }\n\n  return {\n    selectedChatIds,\n    selectedChatTypes,\n  };\n}\n\nfunction getSuggestedFolderName(includeFilters?: FolderIncludeFilters) {\n  if (includeFilters) {\n    const {\n      includedChatIds,\n      ...filters\n    } = includeFilters;\n\n    if (\n      Object.values(filters).filter(Boolean).length > 1\n      || (includedChatIds && includedChatIds.length)\n    ) {\n      return '';\n    }\n\n    if (filters.bots) {\n      return 'Bots';\n    } else if (filters.groups) {\n      return 'Groups';\n    } else if (filters.channels) {\n      return 'Channels';\n    } else if (filters.contacts) {\n      return 'Contacts';\n    } else if (filters.nonContacts) {\n      return 'Non-Contacts';\n    }\n  }\n\n  return '';\n}\n\ntype FolderIncludeFilters = Pick<ApiChatFolder, (\n  'includedChatIds' | 'bots' | 'channels' | 'groups' | 'contacts' | 'nonContacts'\n)>;\ntype FolderExcludeFilters = Pick<ApiChatFolder, 'excludedChatIds' | 'excludeArchived' | 'excludeMuted' | 'excludeRead'>;\n\nexport type FoldersState = {\n  mode: 'create' | 'edit';\n  isLoading?: boolean;\n  isTouched?: boolean;\n  error?: string;\n  folderId?: number;\n  chatFilter: string;\n  folder: Omit<ApiChatFolder, 'id' | 'description' | 'emoticon'>;\n  includeFilters?: FolderIncludeFilters;\n  excludeFilters?: FolderExcludeFilters;\n};\nexport type FoldersActions = (\n  'setTitle' | 'saveFilters' | 'editFolder' | 'reset' | 'setChatFilter' | 'setIsLoading' | 'setError' |\n  'editIncludeFilters' | 'editExcludeFilters' | 'setIncludeFilters' | 'setExcludeFilters'\n);\nexport type FolderEditDispatch = Dispatch<FoldersActions>;\n\nconst INITIAL_STATE: FoldersState = {\n  mode: 'create',\n  chatFilter: '',\n  folder: {\n    title: '',\n    includedChatIds: [],\n    excludedChatIds: [],\n  },\n};\n\nconst foldersReducer: StateReducer<FoldersState, FoldersActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setTitle':\n      return {\n        ...state,\n        folder: {\n          ...state.folder,\n          title: action.payload,\n        },\n        isTouched: true,\n      };\n    case 'editIncludeFilters':\n      return {\n        ...state,\n        includeFilters: pick(\n          state.folder,\n          INCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'editExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: pick(\n          state.folder,\n          EXCLUDE_FILTER_FIELDS,\n        ),\n      };\n    case 'setIncludeFilters':\n      return {\n        ...state,\n        includeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'setExcludeFilters':\n      return {\n        ...state,\n        excludeFilters: action.payload,\n        chatFilter: '',\n      };\n    case 'saveFilters':\n      if (state.includeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, INCLUDE_FILTER_FIELDS),\n            title: state.folder.title ? state.folder.title : getSuggestedFolderName(state.includeFilters),\n            ...state.includeFilters,\n          },\n          includeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else if (state.excludeFilters) {\n        return {\n          ...state,\n          folder: {\n            ...omit(state.folder, EXCLUDE_FILTER_FIELDS),\n            ...state.excludeFilters,\n          },\n          excludeFilters: undefined,\n          chatFilter: '',\n          isTouched: true,\n        };\n      } else {\n        return state;\n      }\n    case 'editFolder': {\n      const { id: folderId, description, ...folder } = action.payload;\n\n      return {\n        mode: 'edit',\n        folderId,\n        folder,\n        chatFilter: '',\n      };\n    }\n    case 'setChatFilter': {\n      return {\n        ...state,\n        chatFilter: action.payload,\n      };\n    }\n    case 'setIsLoading': {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n    case 'setError': {\n      return {\n        ...state,\n        error: action.payload,\n      };\n    }\n    case 'reset':\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(foldersReducer, INITIAL_STATE);\n};\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, useCallback, useMemo, memo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('EditProfile')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('EnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>Delete Folder</MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <div className=\"settings-main-header\">\n            {currentScreen === SettingsScreens.FoldersIncludedChats ? (\n              <h3>{lang('FilterInclude')}</h3>\n            ) : (\n              <h3>{lang('FilterExclude')}</h3>\n            )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text=\"Are you sure you want to log out?\"\n        confirmLabel=\"Log Out\"\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text=\"Are you sure you want to delete this folder?\"\n        confirmLabel=\"Delete\"\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  currentUser,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <div className=\"settings-current-user\">\n            <Avatar user={currentUser} size=\"jumbo\" />\n            <p className=\"name\">{getUserFullName(currentUser)}</p>\n            <p className=\"phone\">{formatPhoneNumberWithCode(currentUser.phoneNumber)}</p>\n          </div>\n        )}\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n        >\n          {lang('EditProfile')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('GeneralSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n    };\n  },\n)(SettingsMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  color?: ButtonProps['color'];\n  ariaLabel?: ButtonProps['ariaLabel'];\n  disabled?: boolean;\n  onClick: () => void;\n  children: any;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  color = 'primary',\n  ariaLabel,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <Button\n      className={buttonClassName}\n      color={color}\n      round\n      disabled={disabled}\n      onClick={isShown && !disabled ? onClick : undefined}\n      ariaLabel={ariaLabel}\n      tabIndex={-1}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport default FloatingActionButton;\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<StateProps & DispatchProps> = ({\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\">\n            {renderText(lang('BioAbout'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\">{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\">\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\">\n              This link opens a chat with you:<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showError'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showError,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showError, onCreateFolder]);\n\n  const lang = useLang();\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(chatsById, usersById, folder, chatIds, lang),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showError({\n        error: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showError]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\">{lang('Filters')}</h4>\n\n        {userFolders && userFolders.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\">{lang('FilterRecommended')}</h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showError']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useState, useEffect, useMemo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick, findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'Please select at least one chat for this folder.';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onReset,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...loadedActiveChatIds || [],\n      ...loadedArchivedChatIds || [],\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\">\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\">\n              {state.error}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\">{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\">{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\">{`Sorry, you can't add more than ${MAX_CHATS} chats.`}</p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\">{lang('FilterChatTypes')}</h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\">{lang('FilterChats')}</h4>\n          </>\n        )}\n\n        {viewportIds && viewportIds.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\n\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FoldersState, FolderEditDispatch } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  state,\n  dispatch,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersIncludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(SettingsScreens.FoldersExcludedChats);\n  }, [dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\">\n          <span className=\"label\">{label}</span>\n          {range && (\n            <span className=\"value\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiSticker } from '../../api/types';\n\nimport { useIsIntersecting, ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from './AnimatedSticker';\nimport Button from '../ui/Button';\n\nimport './StickerButton.scss';\n\ntype OwnProps = {\n  sticker: ApiSticker;\n  size: number;\n  observeIntersection: ObserveFn;\n  noAnimate?: boolean;\n  title?: string;\n  className?: string;\n  onClick?: (arg: any) => void;\n  clickArg?: any;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n};\n\nconst StickerButton: FC<OwnProps> = ({\n  sticker, size, observeIntersection, noAnimate, title, className, onClick, clickArg, onUnfaveClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const localMediaHash = `sticker${sticker.id}`;\n  const stickerSelector = `sticker-button-${sticker.id}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const thumbDataUri = sticker.thumbnail ? sticker.thumbnail.dataUri : undefined;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !isIntersecting, ApiMediaFormat.BlobUrl);\n\n  const shouldPlay = isIntersecting && !noAnimate;\n  const lottieData = useMedia(sticker.isAnimated && localMediaHash, !shouldPlay, ApiMediaFormat.Lottie);\n  const [isAnimationLoaded, markLoaded, unmarkLoaded] = useFlag(Boolean(lottieData));\n  const canAnimatedPlay = isAnimationLoaded && shouldPlay;\n\n  const {\n    shouldRenderThumb,\n    shouldRenderFullMedia: shouldRenderPreview,\n    transitionClassNames: previewTransitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || canAnimatedPlay, 'slow');\n\n  // To avoid flickering\n  useEffect(() => {\n    if (!shouldPlay) {\n      unmarkLoaded();\n    }\n  }, [unmarkLoaded, shouldPlay]);\n\n  function handleClick() {\n    if (onClick) {\n      onClick(clickArg);\n    }\n  }\n\n  function handleUnfaveClick(e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onUnfaveClick!(sticker);\n  }\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    sticker.isAnimated && 'animated',\n    stickerSelector,\n    className,\n  );\n\n  const style = shouldRenderThumb && thumbDataUri ? `background-image: url('${thumbDataUri}');` : '';\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker && sticker.emoji)}\n      // @ts-ignore\n      style={style}\n      data-sticker-id={sticker.id}\n      onClick={handleClick}\n    >\n      {shouldRenderPreview && !canAnimatedPlay && (\n        // eslint-disable-next-line jsx-a11y/alt-text\n        <img src={previewBlobUrl} className={previewTransitionClassNames} />\n      )}\n      {shouldPlay && lottieData && (\n        <AnimatedSticker\n          id={localMediaHash}\n          animationData={lottieData}\n          play\n          size={size}\n          isLowPriority\n          onLoad={markLoaded}\n        />\n      )}\n      {onUnfaveClick && (\n        <Button\n          className=\"sticker-unfave-button\"\n          color=\"dark\"\n          round\n          onClick={handleUnfaveClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = ISettings['byKey'] & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'>;\n\nconst KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n  { value: 'enter', label: 'Send by Enter', subLabel: 'New line by Shift + Enter' },\n  { value: 'ctrl-enter', label: `Send by ${IS_MAC_OS ? 'Cmd' : 'Ctrl'} + Enter`, subLabel: 'New line by Enter' },\n] : undefined;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds && stickerSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const lang = useLang();\n\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById && stickerSetsById[id] && stickerSetsById[id].installedDate ? stickerSetsById[id] : false;\n  }).filter(Boolean);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\">{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\">Choose the desired animations amount.</p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\">{lang('Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('VideosTitle')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey,\n        [\n          'messageTextSize',\n          'animationLevel',\n          'messageSendKeyCombo',\n          'shouldAutoDownloadMediaFromContacts',\n          'shouldAutoDownloadMediaInPrivateChats',\n          'shouldAutoDownloadMediaInGroups',\n          'shouldAutoDownloadMediaInChannels',\n          'shouldAutoPlayGifs',\n          'shouldAutoPlayVideos',\n          'shouldSuggestStickers',\n          'shouldLoopStickers',\n        ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBlur from '../../../hooks/useBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst ANIMATION_DURATION = 300;\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbDataUri = useBlur(\n    document.thumbnail && document.thumbnail.dataUri,\n    Boolean(previewBlobUrl),\n    ANIMATION_DURATION,\n  );\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, CUSTOM_BG_CACHE_NAME, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <img\n            src={thumbDataUri}\n            className=\"thumbnail\"\n            alt=\"\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor } from '../../../util/colors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  customBackground?: string;\n  isBackgroundBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setSettingOption' | 'loadWallpapers' | 'uploadWallpaper'>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  customBackground,\n  isBackgroundBlurred,\n  loadedWallpapers,\n  setSettingOption,\n  loadWallpapers,\n  uploadWallpaper,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setSettingOption({ customBackground: undefined, patternColor: DEFAULT_PATTERN_COLOR });\n  }, [setSettingOption]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setSettingOption({ customBackground: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper && currentWallpaper.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          setSettingOption({ patternColor: getPatternColor(color) });\n        });\n    }\n  }, [loadedWallpapers, setSettingOption]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSettingOption({ isBackgroundBlurred: e.target.checked });\n  }, [setSettingOption]);\n\n  const lang = useLang();\n\n  const isUploading = loadedWallpapers && loadedWallpapers[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBackgroundBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              isSelected={customBackground === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { isBackgroundBlurred, customBackground } = global.settings.byKey;\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      customBackground,\n      isBackgroundBlurred,\n      loadedWallpapers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadWallpapers', 'uploadWallpaper',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  customBackground?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setSettingOption'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  customBackground,\n  setSettingOption,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(customBackground));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      setSettingOption({\n        customBackground: color,\n        patternColor: getPatternColor(rgb),\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setSettingOption]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(customBackground?: string) {\n  return customBackground && customBackground.startsWith('#')\n    ? rgb2hsb(hex2rgb(customBackground.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      customBackground: global.settings.byKey.customBackground,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setSettingOption']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationsSettings' | 'updateContactSignUpNotification' | 'updateNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<StateProps & DispatchProps> = ({\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  loadNotificationsSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationsSettings();\n  }, [loadNotificationsSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentIsShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, isShowPreviews: currentIsShowPreviews }),\n      ...(setting === 'showPreviews' && { isShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('AutodownloadPrivateChats')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(hasPrivateChatsNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasGroupMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(hasBroadcastNotifications ? 'NotificationsEnabled' : 'NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          subLabel={lang(hasBroadcastMessagePreview ? 'PreviewEnabled' : 'PreviewDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationsSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings'>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings]);\n\n  const lang = useLang();\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\">{lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}</span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\">{getVisibilityValue(visibilityPrivacyPhoneNumber)}</span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\">{getVisibilityValue(visibilityPrivacyLastSeen)}</span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\">{getVisibilityValue(visibilityPrivacyProfilePhoto)}</span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\">{getVisibilityValue(visibilityPrivacyForwarding)}</span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\">{getVisibilityValue(visibilityPrivacyGroupChats)}</span>\n          </div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber && privacy.phoneNumber.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen && privacy.lastSeen.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto && privacy.profilePhoto.visibility,\n      visibilityPrivacyForwarding: privacy.forwards && privacy.forwards.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite && privacy.chatInvite.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<StateProps & DispatchProps> = ({\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    setLanguage(langCode, () => {\n      unmarkIsLoading();\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  }));\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  onScreenSelect,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\">{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\">{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<StateProps & DispatchProps> = ({\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('AuthSessions.CurrentSession')}</h4>\n\n        <ListItem narrow inactive>\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">Other Sessions</h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n      >\n        <div className=\"multiline-menu-item full-size\">\n          <span className=\"date\">{formatPastTimeShort(session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n\n      {otherSessions && renderOtherSessions(otherSessions)}\n\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )};\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => ({ activeSessions: global.activeSessions }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<StateProps & DispatchProps> = ({\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\">\n          <h3>{renderText((isPrivate ? getUserFullName(user) : getChatTitle(chat!)) || '')}</h3>\n          {user && user.phoneNumber && (\n            <div className=\"contact-phone\">{formatPhoneNumberWithCode(user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\">\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds && blockedIds.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({ animatedEmoji, onStart }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n\n        <p className=\"settings-item-description mb-3\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  onScreenSelect,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('EnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../modules/helpers';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport GroupChatInfo from './GroupChatInfo';\nimport PickerSelectedItem from './PickerSelectedItem';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\n\nimport './Picker.scss';\n\ntype OwnProps = {\n  itemIds: number[];\n  selectedIds: number[];\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  searchInputId?: string;\n  isLoading?: boolean;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore?: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst Picker: FC<OwnProps> = ({\n  itemIds,\n  selectedIds,\n  filterValue,\n  filterPlaceholder,\n  notFoundText,\n  searchInputId,\n  isLoading,\n  onSelectedIdsChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const shouldMinimize = selectedIds.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n    onFilterChange('');\n  }, [selectedIds, onSelectedIdsChange, onFilterChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, itemIds, Boolean(filterValue));\n\n  const lang = useLang();\n\n  return (\n    <div className=\"Picker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          id={searchInputId}\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={filterPlaceholder || lang('SelectChat')}\n        />\n      </div>\n\n      {viewportIds && viewportIds.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={() => handleItemClick(id)}\n              ripple\n            >\n              <Checkbox label=\"\" checked={selectedIds.includes(id)} />\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{notFoundText || 'Sorry, nothing found.'}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(Picker);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  onScreenSelect,\n}) => {\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport useFoldersReducer from '../../../hooks/reducers/useFoldersReducer';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  currentScreen,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent() {\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility screen={currentScreen} onScreenSelect={onScreenSelect} />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersExcludedChats:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection() {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent()}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  filter, usersById, contactIds, loadContactList, openChat,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById);\n  }, [filter, usersById, contactIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds && viewportIds.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_MOBILE_SCREEN}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, searchQuery, localUserIds, globalUserIds, usersById, chatsById, selectedMemberIds, currentUserId,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds, setGlobalSearchQuery, onNextStep]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus && fetchingStatus.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n        <div className=\"chat-members-list custom-scroll\">\n          {memberIds.map((id) => (\n            <ListItem inactive className=\"chat-item-clickable\">\n              <PrivateChatInfo userId={id} />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {() => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  onReset: () => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ onReset }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" noChatsText=\"Archive is empty.\" />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","const IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nconst preventDefault = (e: Event) => {\n  e.preventDefault();\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key]) {\n    preventDefault(e);\n  }\n}\n\nexport function disableScrolling() {\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  window.ontouchmove = preventDefault; // mobile\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  // eslint-disable-next-line no-null/no-null\n  window.ontouchmove = null;\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { getMessageMediaHash, getMessagePhoto, getMessageText } from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message);\n  const mediaHash = getMessageMediaHash(message, 'inline')!;\n  const canImageBeCopied = photo && mediaHash && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'Copy Media',\n      handler: () => {\n        mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl).then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection\n      && selection.anchorNode\n      && selection.anchorNode.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection, canImageBeCopied),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'CopyMessageLink',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean, canImageBeCopied: boolean): string {\n  if (hasSelection) {\n    return 'Copy Selected Text';\n  }\n\n  if (canImageBeCopied) {\n    return 'Copy Text';\n  }\n\n  return 'Copy';\n}\n","import React, { FC, useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst ANIMATION_DURATION = 200;\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  useEffect(() => {\n    dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n  }, [isOpen]);\n\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const { positionX, positionY, style } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage' |\n  'loadMessageLink'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n  loadMessageLink,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album && album.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    loadMessageLink({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    closeMenu();\n  }, [closeMenu, loadMessageLink, message.chatId, message.id]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n    'loadMessageLink',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectStickerSet } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker: ApiSticker;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSet,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      const { stickerSetId, stickerSetAccessHash } = fromSticker;\n      loadStickers({ stickerSetId, stickerSetAccessHash });\n    }\n  }, [isOpen, fromSticker, loadStickers]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId: fromSticker.stickerSetId });\n    onClose();\n  }, [fromSticker.stickerSetId, onClose, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? stickerSet.title : 'Sticker Set'}\n    >\n      {stickerSet && stickerSet.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={handleSelect}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {`${stickerSet.installedDate ? 'Remove' : 'Add'} ${stickerSet.count} stickers`}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { fromSticker }: OwnProps) => {\n    return { stickerSet: selectStickerSet(global, fromSticker.stickerSetId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMutedState' | 'enterMessageSelectMode'>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_MOBILE_SCREEN && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_MOBILE_SCREEN && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {canSelect && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate ? 'Delete' : (canDeleteChat ? 'Delete and Leave' : 'Leave'))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: chat.isMuted,\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\nimport CalendarModal from '../common/CalendarModal';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'searchMessagesByDate' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  searchMessagesByDate,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeCalendar();\n  }, [closeCalendar, searchMessagesByDate]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const lang = useLang();\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds && foundIds.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={openCalendar}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        isPastMode\n        submitButtonLabel={lang('JumpToDate')}\n        onClose={closeCalendar}\n        onSubmit={handleJumpToDate}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'searchMessagesByDate',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import React, {\n  FC, useCallback, useEffect, useState, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.chat-item-clickable',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filter: string;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filter,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredChatMembers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!filteredChatMembers) {\n      return -1;\n    }\n    const membersCount = filteredChatMembers!.length;\n    return cycleRestrict(membersCount, newIndex);\n  }, [filteredChatMembers]);\n\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(-1);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedMentionIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedMentionIndex, getSelectedIndex]);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById && usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((e: KeyboardEvent) => {\n    if (filteredChatMembers && filteredChatMembers.length && selectedMentionIndex > -1) {\n      const member = filteredChatMembers[selectedMentionIndex];\n      if (member) {\n        e.preventDefault();\n        handleUserSelect(member.userId, true);\n      }\n    }\n  }, [filteredChatMembers, selectedMentionIndex, handleUserSelect]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectMention,\n    onTab: handleSelectMention,\n  }) : undefined), [isOpen, onClose, handleArrowKey, handleSelectMention]);\n\n  useEffect(() => {\n    if (filteredChatMembers && !filteredChatMembers.length) {\n      onClose();\n    }\n  }, [filteredChatMembers, onClose]);\n\n  useEffect(() => {\n    setSelectedMentionIndex(0);\n  }, [filter]);\n\n  useEffect(() => {\n    setItemVisible(selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  const prevChatMembers = usePrevious(\n    filteredChatMembers && filteredChatMembers.length\n      ? filteredChatMembers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredChatMembers && !filteredChatMembers.length\n    ? prevChatMembers\n    : filteredChatMembers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers && renderedChatMembers.map(({ userId }, index) => (\n        <ListItem\n          key={userId}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(userId)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={userId}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\nimport { EDITABLE_INPUT_MODAL_ID } from '../../../config';\n\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  canSuggestMembers?: boolean;\n  canSuggestEmoji?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onClear: () => void;\n};\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  canSuggestMembers,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  recentEmojis,\n  onCaptionUpdate,\n  addRecentEmoji,\n  onSend,\n  onClear,\n}) => {\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const lang = useLang();\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => a.mimeType.startsWith('image/'));\n  const areAllVideos = renderingAttachments.every((a) => a.mimeType.startsWith('video/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = renderingAttachments.length === 1 ? 'Send Photo' : `Send ${renderingAttachments.length} Photos`;\n  } else if (areAllVideos) {\n    title = renderingAttachments.length === 1 ? 'Send Video' : `Send ${renderingAttachments.length} Videos`;\n  } else {\n    title = renderingAttachments.length === 1 ? 'Send File' : `Send ${renderingAttachments.length} Files`;\n  }\n\n  const isQuick = renderingAttachments.every((a) => a.quick);\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"AttachmentModal\">\n      {isQuick ? (\n        <div className=\"media-wrapper custom-scroll\">\n          {renderingAttachments.map((attachment) => (\n            attachment.mimeType.startsWith('image/')\n              ? <img src={attachment.blobUrl} alt=\"\" />\n              : <video src={attachment.blobUrl} autoPlay muted loop />\n          ))}\n        </div>\n      ) : (\n        <div className=\"document-wrapper custom-scroll\">\n          {renderingAttachments.map((attachment) => (\n            <File\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n          ))}\n        </div>\n      )}\n\n      <div className=\"attachment-caption-wrapper\">\n        <MentionTooltip\n          isOpen={isMentionTooltipOpen}\n          onClose={closeMentionTooltip}\n          filter={mentionFilter}\n          onInsertUserName={insertMention}\n          filteredChatMembers={mentionFilteredMembers}\n          usersById={usersById}\n        />\n        <EmojiTooltip\n          isOpen={isEmojiTooltipOpen}\n          emojis={filteredEmojis}\n          onClose={closeEmojiTooltip}\n          onEmojiSelect={insertEmoji}\n          addRecentEmoji={addRecentEmoji}\n        />\n        <MessageInput\n          id=\"caption-input-text\"\n          html={caption}\n          editableInputId={EDITABLE_INPUT_MODAL_ID}\n          placeholder={lang('Caption')}\n          onUpdate={onCaptionUpdate}\n          onSend={onSend}\n          shouldSetFocus={isOpen}\n        />\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return 'Please enter the question';\n    }\n\n    return undefined;\n  }, [hasErrors, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return 'Please enter at least two options';\n    }\n    return undefined;\n  }, [hasErrors, options]);\n\n  const lang = useLang();\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? `Option ${index + 1}`\n            : 'Add an Option'}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel=\"Remove option\"\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">\n        Please choose the correct answer\n      </p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">Options</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">Solution</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">\n              Users will see this comment after choosing a wrong answer, good for educational purposes.\n            </div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\n\nconst MENU_CLOSE_TIMEOUT = 250;\nlet closeTimeout: number | undefined;\n\nexport default function useMouseInside(\n  isOpen: boolean, onClose: NoneToVoidFunction, menuCloseTimeout = MENU_CLOSE_TIMEOUT,\n) {\n  const isMouseInside = useRef(false);\n\n  useEffect(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    if (isOpen && !IS_TOUCH_ENV) {\n      closeTimeout = window.setTimeout(() => {\n        if (!isMouseInside.current) {\n          onClose();\n        }\n      }, menuCloseTimeout * 2);\n    }\n  }, [isOpen, menuCloseTimeout, onClose]);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        onClose();\n      }\n    }, menuCloseTimeout);\n  }, [menuCloseTimeout, onClose]);\n\n  return [handleMouseEnter, handleMouseLeave];\n}\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback(() => {\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onClick={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`/img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_MOBILE_SCREEN\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef, !IS_MOBILE_SCREEN);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis && recentEmojis.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\">\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div ref={containerRef} className=\"EmojiPicker-main no-selection no-scrollbar\">\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_MOBILE_SCREEN ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_MOBILE_SCREEN\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers && set.stickers.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds && addedSetIds.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers && stickerSet.stickers[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div ref={containerRef} className=\"StickerPicker-main no-scrollbar\">\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useTransitionForMedia from '../../hooks/useTransitionForMedia';\nimport useBlur from '../../hooks/useBlur';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbDataUri = useBlur(gif.thumbnail && gif.thumbnail.dataUri, Boolean(previewBlobUrl));\n  const previewData = previewBlobUrl || thumbDataUri;\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { transitionClassNames } = useTransitionForMedia(previewData || videoData, 'slow');\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const className = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    transitionClassNames,\n    localMediaHash,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      onClick={handleClick}\n    >\n      {previewData && !shouldRenderVideo && (\n        <div\n          className=\"preview\"\n          // @ts-ignore\n          style={`background-image: url(${previewData});`}\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          poster={previewData}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewData ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div ref={containerRef} className={buildClassName('GifPicker no-scrollbar', className)}>\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_MOBILE_SCREEN) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={onStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_MOBILE_SCREEN && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_MOBILE_SCREEN) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(SymbolMenu);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_FOR_QUICK_UPLOAD } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      CONTENT_TYPES_FOR_QUICK_UPLOAD,\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>Document</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers && displayedStickers.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"KeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst CLOSE_DURATION = 350;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n\n  useEffect(() => {\n    setSelectedIndex(0);\n  }, [emojis]);\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!emojis.length) {\n      return -1;\n    }\n\n    const emojisCount = emojis.length;\n    return cycleRestrict(emojisCount, newIndex);\n  }, [emojis]);\n\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedIndex, getSelectedIndex]);\n\n  const handleSelectEmoji = useCallback((e: KeyboardEvent) => {\n    if (emojis.length && selectedIndex > -1) {\n      const emoji = emojis[selectedIndex];\n      if (emoji) {\n        e.preventDefault();\n        onEmojiSelect(emoji.native);\n        addRecentEmoji({ emoji: emoji.id });\n      }\n    }\n  }, [addRecentEmoji, emojis, onEmojiSelect, selectedIndex]);\n\n  useEffect(() => (isOpen ? captureKeyboardListeners({\n    onEsc: onClose,\n    onLeft: (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: (e: KeyboardEvent) => handleArrowKey(1, e),\n    onEnter: handleSelectEmoji,\n  }) : undefined), [handleArrowKey, handleSelectEmoji, isOpen, onClose]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={onEmojiSelect}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, useMemo, memo } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(message);\n\n    return (\n      <ListItem className=\"chat-item-clickable search-result-message m-0\" onClick={onClick}>\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3>{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n    >\n      <p className=\"helper-text\">\n        {!query ? (\n          'Search messages'\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length)) || 'No'} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay, loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set && set.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...set.covers || [], ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\">\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\">{set.title}</h3>\n          <p className=\"count\">{set.count} stickers</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {isAdded ? 'Added' : 'Add'}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\">\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<StateProps & DispatchProps> = ({\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\">\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\">\n        <span className=\"answer-title\">{text}</span>\n        <span className=\"answer-percent\">{getPercentage(answerVote.votersCount, totalVoters)}%</span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters && voters[answer.option],\n      offset: (offsets && offsets[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<StateProps> = ({\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\">\n      <h3 className=\"poll-question\">{summary.question}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n  const currentIsMuted = chat ? chat.isMuted : undefined;\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!currentIsMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!currentIsMuted);\n  }, [currentIsMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    if (chat.lastMessage) {\n      deleteHistory({\n        chatId: chat.id,\n        maxId: chat.lastMessage!.id,\n        shouldDeleteForAll: false,\n      });\n    }\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, chat.lastMessage, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n\n    return { user, chat, progress };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'deleteHistory' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteHistory,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteHistory({ chatId: chat.id, maxId: chat.lastMessage!.id, shouldDeleteForAll: false });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id, chat.lastMessage,\n    closeDeleteDialog, closeManagement, deleteHistory, leaveChannel, deleteChannel, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline ripple onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion}>\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"permissions\" multiline ripple onClick={handleClickPermissions} disabled={!canBanUsers}>\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\">{enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo && chat.fullInfo.linkedChatId);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup: isChatBasicGroup(chat),\n      hasLinkedChannel,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'deleteHistory', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights && defaultBannedRights[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem icon=\"delete-user\" multiline ripple narrow onClick={handleRemovedUsersClick}>\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            ripple\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              ripple\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n}) => {\n  const lang = useLang();\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat && chat.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat && chat.fullInfo && chat.fullInfo.adminMembers && chat.fullInfo.adminMembers.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" ripple multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem icon=\"message\" multiline ripple onClick={handleClickDiscussion} disabled={!canChangeInfo}>\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem icon=\"admin\" multiline ripple onClick={handleClickAdministrators}>\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline ripple onClick={handleClickSubscribers}>\n            <span className=\"title\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\">{lang('Subscribers', chat.membersCount!, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat && chat.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo && chat.fullInfo.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = (\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic)\n  );\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\">\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\">{lang(`${langPrefix1}PrivateLinkHelp`)}</p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat && linkedChat.id;\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat && chat.fullInfo && chat.fullInfo.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.bannedRights) || (chat && chat.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatBannedRights]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatBannedRights) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const lang = useLang();\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem icon=\"recent\" multiline ripple onClick={handleRecentActionsClick}>\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <p className=\"text-muted\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat }) => {\n  const lang = useLang();\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\">\n          <h3 className=\"section-heading\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\">\n          <h3 className=\"section-heading\">Admins</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat && chat.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember && selectedChatMember.adminRights) || {});\n    setCustomTitle(((selectedChatMember && selectedChatMember.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById);\n  }, [members, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.filter((member) => !member.isOwner).map(({ userId }) => userId), usersById);\n  }, [members, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return <ManageUser key={chatId} userId={chatId} />;\n        case 'group':\n          return <ManageGroup key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n        case 'channel':\n          return <ManageChannel key={chatId} chatId={chatId} onScreenSelect={onScreenSelect} />;\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType chatId={chatId} />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers chatId={chatId} />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers chatId={chatId} />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const CURRENCIES: Record<string, string> = {\n  USD: '$',\n  EUR: '€',\n  GBP: '£',\n  JPY: '¥',\n  RUB: '₽',\n  UAH: '₴',\n  INR: '₹',\n  AED: 'د.إ',\n};\n\nexport function getCurrencySign(currency: string | undefined): string {\n  if (!currency) {\n    return '';\n  }\n  return CURRENCIES[currency] || '';\n}\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport { countryList } from '../../util/phoneNumber';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types/index';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: `${currency} ${String(amount / 100)}`,\n    value,\n  }))), [shippingOptions, currency]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { Price } from '../../types';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    description?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const { photoUrl, title, text } = (invoiceContent || {});\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        { photoUrl && (\n          <img src={photoUrl} alt=\"\" />\n        )}\n        <div className=\"text\">\n          <h5>{ title }</h5>\n          <p>{ text }</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(item.label, item.amount, currency, false)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem('Total', totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(title: string, value: number, currency?: string, main = false) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        { `${currency || ''} ${(value / 100).toFixed(2)}` }\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts && parts[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts && parts[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","export default __webpack_public_path__ + \"mastercard.4216118edafe23cc2dec7b8807ba4622.svg\";","export default __webpack_public_path__ + \"visa.e5a7c336e1deb4b92a636e2e053878c4.svg\";","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport { countryList } from '../../util/phoneNumber';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\nimport { ApiError } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport { getShippingError } from '../../modules/helpers/payments';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  globalErrors?: ApiError[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  globalErrors,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const currencySign = getCurrencySign(currency);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error || globalErrors) {\n      setIsLoading(false);\n    }\n  }, [step, error, globalErrors]);\n\n  useEffect(() => {\n    if (error && error.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.fieldError,\n        },\n      });\n      return;\n    }\n    if (globalErrors && globalErrors.length) {\n      const errors = getShippingError(globalErrors);\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          ...errors,\n        },\n      });\n    }\n  }, [error, globalErrors, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        {error.description || 'Error'}\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          OK\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(cuurentStep: PaymentStep) {\n    switch (cuurentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currencySign}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return `Pay ${currencySign}${(totalPrice / 100).toFixed(2)}`;\n      default:\n        return 'Next Step';\n    }\n  }, [step, totalPrice, currencySign]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        Sorry, Telegram T doesn&apos;t support payments with this provider yet.\n         Please use one of our mobile apps to do this.\n        <Button\n          isText\n          onClick={onClose}\n        >\n          OK\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\">\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{ modalHeader }</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      globalErrors: global.errors,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option ? option.prices : undefined;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption ? shippingOption.title : undefined;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types/payments';\n\nimport useLang from '../../hooks/useLang';\nimport { getCurrencySign } from '../middle/helpers/getCurrencySign';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const currencySign = getCurrencySign(currency);\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\">\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currencySign}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices: mapedPrices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress && shippingAddress.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyIdle.dea4a492c144df84ddab778dc8a3f0cd.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyTracking.eb5a7a6f166fb7589c12e6248561fb58.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyClose.604c4c833d322b7e6c3ea19bef058241.tgs\";","export default __webpack_public_path__ + \"TwoFactorSetupMonkeyPeek.1905436b042520363d7e59f5d7f903ab.tgs\";","export default __webpack_public_path__ + \"FoldersAll.3f9f9e243d19f0fbf9aaaff11cbd4572.tgs\";","export default __webpack_public_path__ + \"FoldersNew.9a40d71c0c8be70f5bd14ff2d7bc1593.tgs\";","export default __webpack_public_path__ + \"DiscussionGroupsDucks.9ea453d1be9d1b0ee77a992f8e587485.tgs\";","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 0.8,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_MOBILE_SCREEN ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_MOBILE_SCREEN } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_MOBILE_SCREEN ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div className={buildClassName('input-group password-input', password && 'touched', error && 'error')}>\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n"],"sourceRoot":""}