{"version":3,"sources":["webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/hooks/useCurrentOrPrev.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumb.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/middle/composer/hooks/useEmojiTooltip.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/EmojiTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Errors.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["window","addEventListener","e","state","chatId","id","threadId","messageListType","type","getDispatch","openChat","noPushState","addReducer","global","actions","payload","currentMessageList","selectCurrentMessageList","exitMessageSelectMode","messages","contentToBeScheduled","undefined","forwardMessages","toChatId","setGlobal","history","pushState","updateCurrentMessageList","isChatInfoShown","chatCreation","blurTimeout","scrollOffset","replaceThreadParam","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","setTimeout","newGlobal","getGlobal","lastMessageId","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","focusMessage","noHighlight","groupedId","groupedChatId","ids","selectForwardedMessageIdsByGroupId","length","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","isPollModalOpen","query","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","pop","content","updateGlobalSearchContent","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","replaceSettings","management","byChatId","isActive","IS_MOBILE_SCREEN","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","message","splice","push","error","getReadableErrorText","newErrors","errors","existingErrorIndex","err","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","map","Number","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","showNotification","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","IS_TOUCH_ENV","loadPinnedMessages","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","createChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","url","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","userId","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","offset","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","setReplyingToId","clearWebPagePreview","value","selectReplyingToId","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","indexOf","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","draftsByChatId","acc","lastReadInboxMessageId","newCurrentChatId","currentMessageListInfo","threadsById","Array","prototype","concat","replaceUsers","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","lastRequestedAt","topPeers","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","button","sendBotCommand","command","openTelegramLink","open","data","alert","isError","showError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bio","profileEdit","ProfileEditProgress","currentUser","Idle","settings","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","peerType","isShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isLoading","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","selectIsViewportNewest","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","newResults","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","twoFaSettings","memo","name","label","checked","disabled","inactive","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","theme","animationLevel","byKey","globalSearchChatId","searchDate","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","openTipsChat","setGlobalSearchDate","setSettingOption","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","isNewThemeDark","customBackground","DARK_THEME_BG_COLOR","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","lang","useLang","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_INFO","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","SearchInput","inputId","focused","placeholder","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","connectionState","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","transitionRef","activeTab","setActiveTab","useState","useEffect","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","NewChat","ContentType","ArchivedChats","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","captureEscKeyListener","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","removeEventListener","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","useCurrentOrPrev","shouldSkipUndefined","shouldForceCurrent","prev","usePrevious","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","fluid","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","useFlag","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","senderName","getSenderTitle","noUi","closeAudioPlayer","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioChatId","audioMessageId","audioMessage","originChat","messagesCount","pinnedIds","isSelectModeActive","chatTitleLength","getChatTitle","originChatId","isChatWithBot","selectIsChatWithBot","pinnedMessageIds","firstPinnedMessage","canUnpin","pinnedMessageId","selectForwardedSender","topMessageTitle","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","newIndex","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","componentEl","add","remove","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","isAlbum","messageOrAlbum","groupMessages","firstUnreadId","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDatetime","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","isFabFrozen","MessageScroll","containerHeight","listItemElementsRef","focusingId","anchorIdRef","anchorTopRef","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","updateFabVisibility","scrollHeight","scrollBottom","observe","observeIntersection","freeze","freezeForLoadMore","unfreeze","unfreezeForLoadMore","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","target","resetScroll","dataset","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","preservedItemElements","element","teactFastList","data-is-active","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","calculateMediaDimensions","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","REM","getMaxWidth","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","calculateAuthorWidth","createElement","font","whiteSpace","position","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserId","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","noAppearanceAnimation","markShown","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumb","fullMediaData","useBlur","LAYERS_TRANSITION_DURATION","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","canPlayInline","canMessagePlayVideoInline","setIsPlayAllowed","previewMediaData","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","usePauseOnInactive","useVideoCleanup","videoClassName","videoStyle","shouldRenderInlineVideo","shouldRenderHqPreview","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","duration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","hasDocument","siteName","displayUrl","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrapedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","toString","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","poster","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","formatInteger","renderLabel","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","isLastInList","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","avatarPeer","senderPeer","adminTitle","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","fromMessageId","calculatedWidth","extraPadding","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","showCommentsButton","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","runThrottledOnTickEnd","throttleWithTickEnd","selectCurrentMessageIds","restrictionReason","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","selectFirstUnreadId","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","scrollOffsetRef","selectScrollOffset","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","freezeForMedia","unfreezeForMedia","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","IS_IOS","webkitOverflowScrolling","clientHeight","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","isAtBottom","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","shouldRenderUnreadDivider","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","getCanPostInChat","focusLastMessage","messsageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","startsWith","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","formattedText","currentThreadId","emojiDataPromise","emojiRawData","emojiData","RE_NOT_EMOJI_SEARCH","useEmojiTooltip","html","recentEmojiIds","onUpdateHtml","markIsOpen","unmarkIsOpen","emojiIds","setEmojiIds","filteredEmojis","setFilteredEmojis","emojiId","emojis","uncompressEmoji","ensureEmojiData","tempEl","innerText","lastSymbol","lastWord","test","getEmojiCode","substr","matched","names","insertEmoji","textEmoji","atIndex","lastIndexOf","focusEditableElement","isEmojiTooltipOpen","closeEmojiTooltip","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","EmojiTooltip","BotKeyboardMenu","forwardMessageIds","replyingToId","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","canSuggestMembers","isChatGroup","stickersForEmoji","groupChatMembers","isReceiptModalOpen","shouldSuggestStickers","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredMembers","useMentionTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","insertTextAndUpdateCursor","selection","getSelection","newHtml","replace","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","execCommand","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","removeSymbol","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","tagName","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","preventDefault","useClipboardPaste","handleFileSelect","files","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handlePollSend","handleSilentSend","handleMessageSchedule","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","Portal","containerId","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onSend","onClear","onInsertUserName","filteredChatMembers","canAttachEmbedLinks","faded","MessageInput","innerWidth","shouldSetFocus","shouldSupressFocus","shouldSupressTextFormatter","onUpdate","onSupressedFocus","formatVoiceRecordDuration","onStickerSelect","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","selectedAt","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBackgroundBlurred","isCustomBackgroundColor","isBotNotStarted","isPinnedMessageList","messageSendingRestrictionReason","getMessageSendingRestrictionReason","hasPinnedOrAudioMessage","isMobileSearchActive","loadUser","setDropAreaState","isFabShown","setIsFabShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","onDragEnter","ANIMATION_LEVEL_MAX","shouldCleanup","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","backButtonRef","handleMessageSearchQueryChange","handleJumpToDate","valueOf","handleStickerSearchQueryChange","handleGifSearchQueryChange","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","isPastMode","submitButtonLabel","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","currentIsMuted","chatUsername","entity","handleNotificationChange","formattedNumber","getChatDescription","getChatLink","printedUsername","printedDescription","ListItem","multiline","narrow","TABS","buildInfiniteScrollItemSelector","isGroup","hasMembersTab","areMembersHidden","canViewMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","renderingFor","teactOrderKey","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","RightSearch","Management","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closeLocalTextSearch","closePollResults","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","GroupType","handleSelectChatMember","memberId","isPromoted","onChatMemberSelect","prevContentKey","MediaViewer","Errors","ForwardPicker","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasErrors","middleColumnTransitionClassNames","rightColumnTransitionClassNames","stopEvent","initialUnread","selectCountNotMutedUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.c0b5da0ccdb3d33dcf44.js","sourcesContent":["import { addReducer, getDispatch, setGlobal } from '../../../lib/teact/teactn';\nimport {\n  exitMessageSelectMode,\n  updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\nwindow.addEventListener('popstate', (e) => {\n  if (!e.state) {\n    return;\n  }\n\n  const { chatId: id, threadId, messageListType: type } = e.state;\n\n  getDispatch().openChat({\n    id, threadId, type, noPushState: true,\n  });\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', noPushState,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = exitMessageSelectMode(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n\n    if (!noPushState) {\n      window.history.pushState({ chatId: id, threadId, messageListType: type }, '');\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 2000;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  return toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n});\n\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n});\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings } from '../../../types';\nimport { replaceSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_MOBILE_SCREEN) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if (!getReadableErrorText(error)) {\n    return global;\n  }\n\n  const newErrors = [...global.errors];\n  const existingErrorIndex = newErrors.findIndex((err) => err.message === error.message);\n  if (existingErrorIndex !== -1) {\n    newErrors.splice(existingErrorIndex, 1);\n  }\n\n  newErrors.push(error);\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n\naddReducer('dismissError', (global) => {\n  const newErrors = [...global.errors];\n\n  newErrors.pop();\n\n  return {\n    ...global,\n    errors: newErrors,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 200;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n\n      if (IS_TOUCH_ENV) {\n        actions.loadPinnedMessages({ chatId: chatToPreload.id });\n      }\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', chat);\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const chat = await callApi('openChatByInvite', hash);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', draft);\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  const { chatId, maxId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', { chat, threadId, maxId });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { hash, lastRequestedAt } = global.topPeers;\n\n  if (!lastRequestedAt || Date.now() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now(),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationsSettings', () => {\n  (async () => {\n    const result = await callApi('loadNotificationsSettings');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, isShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, isShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, isShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n","import { addReducer, getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChatMessage, selectCurrentChat } from '../../selectors';\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        window.open(button.value);\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showError({ error: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!message.isOutgoing) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds]\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const ids = Object.keys(global.messages.byChatId[chatId].byId).map(Number);\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    global = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.isShowPreviews);\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  APP_INFO, DEFAULT_PATTERN_COLOR, FEEDBACK_URL, DARK_THEME_BG_COLOR, DARK_THEME_PATTERN_COLOR,\n} from '../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_MOBILE_SCREEN}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? 'Open menu' : 'Return to chat list'}\n      >\n        <div className={buildClassName('animated-menu-icon', !hasMenu && 'state-back')} />\n      </Button>\n    );\n  }, [hasMenu, onReset]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    const isNewThemeDark = newTheme === 'dark';\n\n    setSettingOption({\n      theme: newTheme,\n      customBackground: isNewThemeDark ? DARK_THEME_BG_COLOR : undefined,\n      patternColor: isNewThemeDark ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n    switchTheme(newTheme, animationLevel > 0);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const lang = useLang();\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={APP_INFO}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">Dark Mode</span>\n            <Switcher\n              id=\"darkmode\"\n              label=\"Toggle Dark Mode\"\n              checked={theme === 'dark'}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            Telegram Features\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { theme, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { FC } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = ({ connectionState }) => {\n  const lang = useLang();\n\n  const isConnecting = connectionState === 'connectionStateConnecting';\n\n  return isConnecting && (\n    <div id=\"ConnectionState\">\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default withGlobal(\n  (global): StateProps => pick(global, ['connectionState']),\n)(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders'>;\n\nconst INFO_THROTTLE = 3000;\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  orderedFolderIds,\n  lastSyncTime,\n  loadChatFolders,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: 'All' },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeTab >= folderTabs.length) {\n      setActiveTab(0);\n    }\n  }, [activeTab, folderTabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, folderTabs]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  const lang = useLang();\n\n  function renderCurrentTab() {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeTab].title);\n\n    if (!activeFolder || activeTab === 0) {\n      return <ChatList folderType=\"all\" />;\n    }\n\n    return <ChatList folderType=\"folder\" folderId={activeFolder.id} noChatsText={lang('FilterNoChatsToDisplay')} />;\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeTab} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name=\"slide\"\n        activeKey={activeTab}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadChatFolders']),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={isMenuOpen ? 'Close' : 'Create new chat'}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>New Private Chat</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n      />\n      <ConnectionState />\n      <Transition name=\"zoom-fade\" renderCount={TRANSITION_RENDER_COUNT} activeKey={content}>\n        {() => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (\n      content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [content, setGlobalSearchQuery, setGlobalSearchChatId, setGlobalSearchDate, resetChatCreation, settingsScreen]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, setGlobalSearchQuery, searchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList ? captureEscKeyListener(() => handleReset()) : undefined),\n    [content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={IS_MOBILE_SCREEN ? 'slide-layers' : 'push-slide'}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n    >\n      {() => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                onReset={handleReset}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                currentScreen={settingsScreen}\n                onScreenSelect={setSettingsScreen}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { query, date } = global.globalSearch;\n    return { searchQuery: query, searchDate: date };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { IDimensions } from '../modules/helpers';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<IDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import usePrevious from './usePrevious';\n\nexport default function useCurrentOrPrev<T extends any>(\n  current: T, shouldSkipUndefined = false, shouldForceCurrent = false,\n): T | undefined {\n  const prev = usePrevious(current, shouldSkipUndefined);\n\n  // eslint-disable-next-line no-null/no-null\n  return shouldForceCurrent || (current !== null && current !== undefined) ? current : prev;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_MOBILE_SCREEN) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_MOBILE_SCREEN && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('Start')}\n        </Button>\n      )}\n      {!IS_MOBILE_SCREEN && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_MOBILE_SCREEN || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_MOBILE_SCREEN}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_MOBILE_SCREEN && canSubscribe)\n      || (IS_MOBILE_SCREEN && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p>{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiAudio, ApiMessage } from '../../api/types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  senderName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, senderName, focusMessage, closeAudioPlayer,\n}) => {\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  const lang = useLang();\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)}>\n      <Button\n        round\n        ripple={!IS_MOBILE_SCREEN}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }) => {\n    const sender = selectSender(global, message);\n    const senderName = sender ? getSenderTitle(sender) : undefined;\n\n    return { senderName };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n};\n\ntype StateProps = {\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageTitle?: string;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatTitleLength?: number;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageTitle,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chatTitleLength,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [chatId]);\n\n  // Modify index after unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(pinnedMessagesCount ? cycleRestrict(pinnedMessagesCount, pinnedMessageIndex) : -1);\n  }, [pinnedMessagesCount, pinnedMessageIndex]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = windowWidth >= MOBILE_SCREEN_MAX_WIDTH && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback(() => {\n    if (IS_MOBILE_SCREEN) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_MOBILE_SCREEN) {\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, chat) => {\n      if (isChatArchived(chat)) {\n        return total;\n      }\n\n      const count = chat.unreadCount || 0;\n      if (count && (!chat.isMuted || chat.unreadMentionsCount)) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const lang = useLang();\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition name=\"slide-fade\" activeKey={messageListType === 'thread' ? threadId : 1}>\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    let state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chatTitleLength: chat && getChatTitle(chat).length,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType === 'thread' && messagesById) {\n      if (threadId === MAIN_THREAD_ID) {\n        const pinnedMessageIds = selectPinnedIds(global, chatId);\n\n        if (pinnedMessageIds && pinnedMessageIds.length) {\n          const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n          const {\n            canUnpin,\n          } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n          state = {\n            ...state,\n            pinnedMessageIds,\n            messagesById,\n            canUnpin,\n          };\n        }\n      } else {\n        const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n        const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n        const sender = message ? selectForwardedSender(global, message) : undefined;\n        const topMessageTitle = sender ? getSenderTitle(sender) : undefined;\n\n        state = {\n          ...state,\n          pinnedMessageIds: pinnedMessageId,\n          messagesById,\n          canUnpin: false,\n          topMessageTitle,\n        };\n      }\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDatetime = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDatetime) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDatetime,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  containerHeight?: number;\n  listItemElementsRef: MutableRefObject<HTMLDivElement[] | undefined>;\n  anchorIdRef: MutableRefObject<string | undefined>;\n  anchorTopRef: MutableRefObject<number | undefined>;\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  focusingId?: number;\n  onFabToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst FAB_FREEZE_TIMEOUT = 100;\n\n// Local flag is used because `freeze/unfreeze` methods are controlled by heavy animation\nlet isFabFrozen = false;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  containerHeight,\n  listItemElementsRef,\n  focusingId,\n  anchorIdRef,\n  anchorTopRef,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const updateFabVisibility = useCallback(() => {\n    if (isFabFrozen) {\n      return;\n    }\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom === 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId]);\n\n  const {\n    observe: observeIntersection,\n    freeze: freezeForLoadMore,\n    unfreeze: unfreezeForLoadMore,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger' && (target as HTMLDivElement).dataset.isActive) {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, ([{ target }]) => {\n    if ((target as HTMLDivElement).dataset.isActive) {\n      updateFabVisibility();\n    }\n  });\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  // Do not load more and show FAB when focusing\n  useOnChange(() => {\n    if (focusingId) {\n      freezeForLoadMore();\n      freezeForFab();\n    } else {\n      unfreezeForFab();\n      unfreezeForLoadMore();\n    }\n  }, [focusingId]);\n\n  // Remember scroll position before updating height\n  useOnChange(() => {\n    if (!listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  }, [messageIds, containerHeight]);\n\n  // Workaround for FAB flickering with tall incoming message\n  useOnChange(() => {\n    isFabFrozen = true;\n\n    setTimeout(() => {\n      isFabFrozen = false;\n    }, FAB_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  // Workaround for stuck FAB when many unread messages\n  useEffect(updateFabVisibility, [firstUnreadId]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n        data-is-active={!isViewportNewest}\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n        data-is-active={isViewportNewest}\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean) {\n  return hasText ? MIN_MEDIA_WIDTH_WITH_TEXT : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto)\n    : calculateVideoDimensions(video!, isOwn, isForwarded);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage } from '../../../../api/types';\nimport { IDimensions } from '../../../../modules/helpers';\n\nimport { MOBILE_SCREEN_MAX_WIDTH } from '../../../../config';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nconst MAX_WIDTH_MOBILE_VW = 69;\nconst MAX_WIDTH_DESK_OWN_REM = 30;\nconst MAX_WIDTH_DESK_REM = 29;\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: IDimensions;\n};\n\nfunction getMaxWidth(isOwn: boolean, isForwarded: boolean, windowWidth: number) {\n  if (windowWidth <= MOBILE_SCREEN_MAX_WIDTH) {\n    return (windowWidth / 100) * MAX_WIDTH_MOBILE_VW - (isForwarded ? 1.625 : 0) * REM;\n  }\n\n  const maxWidth = isOwn ? MAX_WIDTH_DESK_OWN_REM : MAX_WIDTH_DESK_REM;\n\n  return (maxWidth - (isForwarded ? 1.625 : 0)) * REM;\n}\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as IDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: IDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  album: IAlbum,\n  windowWidth: number,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getMaxWidth(isOwn, isForwarded, windowWidth);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = '400 12px Roboto, \"Helvetica Neue\", \"Apple Color Emoji\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\nimport { FocusDirection } from '../../../../types';\n\n// This is the max scroll offset within existing viewport.\nconst FOCUS_MAX_OFFSET = 1500;\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'center',\n        FOCUS_MARGIN,\n        focusDirection === undefined ? FOCUS_MAX_OFFSET : RELOCATED_FOCUS_OFFSET,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  targetUser?: ApiUser;\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  sender,\n  targetUser,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const content = renderActionMessageText(\n    message,\n    sender,\n    targetUser,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={buildClassName(\n        'ActionMessage message-list-item',\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        transitionClassNames,\n      )}\n      data-message-id={message.id}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const userId = message.senderId;\n    const { targetUserId, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      sender,\n      ...(targetUserId && { targetUser: selectUser(global, targetUserId) }),\n      targetChatId,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n\n  useLang();\n\n  const senderTitle = sender && getSenderTitle(sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl)}\n      <div className=\"message-text\">\n        <div className=\"message-title\">{renderText(senderTitle || title || NBSP)}</div>\n        <p>\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img id={id} src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { LAYERS_TRANSITION_DURATION } from '../../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useBlur from '../../../../hooks/useBlur';\n\nexport default function useBlurredMediaThumb(message: ApiMessage, fullMediaData?: string) {\n  return useBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_MOBILE_SCREEN ? LAYERS_TRANSITION_DURATION : undefined,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = 'rgba(255,255,255,1)';\n\nexport default async (src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) => {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n};\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbDataUri = useBlurredMediaThumb(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const thumbClassName = buildClassName(\n    'thumbnail',\n    !thumbDataUri && 'empty',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <img\n          src={thumbDataUri}\n          className={thumbClassName}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  canMessagePlayVideoInline,\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n  const localBlobUrl = video.blobUrl;\n  const canPlayInline = Boolean(localBlobUrl) || canMessagePlayVideoInline(video);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurredMediaThumb(message, previewBlobUrl);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const previewMediaData = previewBlobUrl || thumbDataUri;\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(canPlayInline && isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && (canPlayInline && !isBuffered),\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (canPlayInline && !fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (canPlayInline && fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, canPlayInline, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const thumbClassName = buildClassName('thumbnail', !previewMediaData && 'empty');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n  const videoStyle = previewMediaData ? `background-image: url(${previewMediaData}); background-size: cover` : '';\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderHqPreview = !canPlayInline && mediaData;\n  const shouldRenderPlayButton = !canPlayInline || (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = canPlayInline && !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(shouldRenderThumb || !isInline) && (\n        <img\n          src={previewMediaData}\n          className={thumbClassName}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // @ts-ignore teact feature\n          style={videoStyle}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderHqPreview && (\n        <img\n          src={mediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && !canPlayInline ? (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      ) : isTransferring && canPlayInline ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(video.duration - playProgress)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\">\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {getPollTypeString(summary)}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'Quiz' : 'Anonymous Quiz';\n  }\n\n  if (summary.closed) {\n    return 'Final results';\n  }\n\n  return summary.isPublic ? 'Poll' : 'Anonymous Poll';\n}\n\nfunction getReadableVotersCount(isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return isQuiz ? 'No answers yet' : 'No voters yet';\n  }\n\n  return isQuiz ? `${count} answered` : `${count} voted`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { byId: usersById } = global.users;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  shouldAutoLoad?: boolean;\n  inPreview?: boolean;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  inPreview,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    if (webPage && (isSquarePhoto || webPage.hasDocument)) {\n      window.open(webPage.url);\n    } else if (onMediaClick) {\n      onMediaClick();\n    }\n  }, [webPage, isSquarePhoto, onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n  } = webPage;\n\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    photo\n      ? (isSquarePhoto && 'with-square-photo')\n      : (!inPreview && 'without-photo'),\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n    >\n      {photo && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          onClick={handleMediaClick}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrapedComponent: FC) {\n  const Component: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrapedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(Component));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useBlurredMediaThumb from './hooks/useBlurredMediaThumb';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurredMediaThumb(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n      capturePlaying();\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {shouldRenderThumb && (\n        <div className=\"thumbnail-wrapper\">\n          <img\n            src={thumbDataUri}\n            className=\"thumbnail\"\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            alt=\"\"\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            poster={thumbDataUri}\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {button.text}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\">\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\">{renderLabel(messagesCount)}</div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nfunction renderLabel(messagesCount: number) {\n  if (messagesCount === 0) {\n    return 'Leave a Comment';\n  }\n\n  if (messagesCount === 1) {\n    return '1 Comment';\n  }\n\n  return `${formatInteger(messagesCount)} Comments`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { FocusDirection, IAlbum, MediaViewerOrigin } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia, selectShouldLoopStickers,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji, getSenderTitle, getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentsButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({ chatId, threadId, messageId: message.replyToMessageId });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), album!, windowWidth) : undefined;\n  }, [isAlbum, windowWidth, isOwn, asForwarded, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text)), width);\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text)), albumLayout.containerStyle.width);\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick}>\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && <p className=\"text-content\">{textParts}</p>}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !customShape && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer) {\n      senderTitle = getSenderTitle(senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  );\n  const showCommentsButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleBeforeContextMenu : undefined}\n      onContextMenu={!isInSelectMode ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n        >\n          {contentClassName.includes('has-appendix') && (<div className=\"svg-appendix\" ref={appendixRef} />)}\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Forward message\"\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {showCommentsButton && <CommentsButton message={message} disabled={noComments} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_IOS, IS_MOBILE_SCREEN } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages, selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, throttleWithTickEnd, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  onFabToggle: (show: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_MOBILE_SCREEN ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\nconst runThrottledOnTickEnd = throttleWithTickEnd((cb) => cb());\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(!messageIds);\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia, freeze: freezeForMedia, unfreeze: unfreezeForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n\n    if (focusingId) {\n      freezeForMedia();\n      freezeForReading();\n    } else {\n      unfreezeForReading();\n      unfreezeForMedia();\n    }\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight]);\n\n  // Workaround for an iOS bug when animated stickers sometimes disappear\n  useLayoutEffect(() => {\n    if (!IS_IOS) {\n      return;\n    }\n\n    runThrottledOnTickEnd(() => {\n      if (!(containerRef.current as HTMLDivElement).querySelector('.AnimatedSticker.is-playing')) {\n        return;\n      }\n\n      const style = (containerRef.current as HTMLDivElement).style as any;\n      style.webkitOverflowScrolling = style.webkitOverflowScrolling === 'auto' ? '' : 'auto';\n    });\n  });\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP);\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    !withUsers && 'no-avatars',\n    isChannelChat && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n  );\n\n  return (\n    <div ref={containerRef} className={className} onScroll={handleScroll}>\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          containerHeight={containerHeight}\n          listItemElementsRef={listItemElementsRef}\n          focusingId={focusingId}\n          anchorIdRef={anchorIdRef}\n          anchorTopRef={anchorTopRef}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId?: number,\n  threadFirstMessageId?: number,\n  hasLinkedChat?: boolean,\n  isSchedule = false,\n  noAppearanceAnimation = false,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const shouldRenderUnreadDivider = (\n          (message.id === memoFirstUnreadIdRef.current && memoFirstUnreadIdRef.current !== threadFirstMessageId)\n          || (message.id === threadTopMessageId && memoFirstUnreadIdRef.current === threadFirstMessageId)\n        );\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          shouldRenderUnreadDivider && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        teactFastList\n      >\n        <div className=\"sticky-date\" key=\"date-header\">\n          <span>\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { getCanPostInChat } from '../../modules/helpers';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  canPost?: boolean;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusLastMessage'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  messageListType,\n  canPost,\n  unreadCount,\n  focusLastMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusLastMessage();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messsageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messsageElements[messsageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusLastMessage]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel=\"Scroll to bottom\"\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const canPost = chat && getCanPostInChat(chat, threadId);\n\n    return {\n      messageListType,\n      canPost,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusLastMessage']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","export default __webpack_public_path__ + \"8ccc0b555efcec3616377aea078dda16.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && input.tagName === 'INPUT' && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  // Subscribe and handle `window.blur`\n  useEffect(() => {\n    function handleBlur() {\n      if (chatId && threadId) {\n        updateDraft(chatId, threadId);\n      }\n    }\n\n    window.addEventListener('blur', handleBlur);\n\n    return () => {\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [chatId, threadId, updateDraft]);\n};\n","import {\n  useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport { IS_MOBILE_SCREEN } from '../../../../util/environment';\nimport {\n  EmojiData, EmojiModule, EmojiRawData, uncompressEmoji,\n} from '../../../../util/emoji';\nimport useFlag from '../../../../hooks/useFlag';\nimport focusEditableElement from '../../../../util/focusEditableElement';\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst RE_NOT_EMOJI_SEARCH = /[^-:_a-z\\d]+/i;\nconst EMOJIS_LIMIT = 36;\n\nexport default function useEmojiTooltip(\n  isAllowed: boolean,\n  html: string,\n  recentEmojiIds: string[],\n  inputId = EDITABLE_INPUT_ID,\n  onUpdateHtml: (html: string) => void,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [emojiIds, setEmojiIds] = useState<string[]>([]);\n  const [filteredEmojis, setFilteredEmojis] = useState<Emoji[]>([]);\n\n  const recentEmojis = useMemo(\n    () => {\n      if (!emojiIds.length || !recentEmojiIds.length) {\n        return [];\n      }\n\n      return recentEmojiIds\n        .map((emojiId) => emojiData.emojis[emojiId])\n        .filter<Emoji>(Boolean as any);\n    },\n    [emojiIds, recentEmojiIds],\n  );\n\n  // Initialize data on first render.\n  useEffect(() => {\n    const exec = () => {\n      setEmojiIds(Object.keys(emojiData.emojis));\n    };\n\n    if (emojiData) {\n      exec();\n    } else {\n      ensureEmojiData()\n        .then(exec);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!html || !emojiIds.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const code = getEmojiCode(html);\n    if (!code) {\n      setFilteredEmojis([]);\n      unmarkIsOpen();\n      return;\n    }\n\n    const filter = code.substr(1);\n    const matched = filter === ''\n      ? recentEmojis\n      : emojiIds\n        .filter((emojiId) => emojiData.emojis[emojiId].names.find((name) => name.includes(filter)))\n        .slice(0, EMOJIS_LIMIT)\n        .map((emojiId) => emojiData.emojis[emojiId]);\n\n    if (matched.length) {\n      markIsOpen();\n      setFilteredEmojis(matched);\n    } else {\n      unmarkIsOpen();\n    }\n  }, [emojiIds, html, markIsOpen, recentEmojis, unmarkIsOpen]);\n\n  const insertEmoji = useCallback((textEmoji: string) => {\n    const atIndex = html.lastIndexOf(':');\n    if (atIndex !== -1) {\n      onUpdateHtml(`${html.substr(0, atIndex)}${textEmoji}`);\n      const messageInput = document.getElementById(inputId)!;\n      if (!IS_MOBILE_SCREEN) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    }\n\n    unmarkIsOpen();\n  }, [html, inputId, onUpdateHtml, unmarkIsOpen]);\n\n  return {\n    isEmojiTooltipOpen: isOpen,\n    closeEmojiTooltip: unmarkIsOpen,\n    filteredEmojis,\n    insertEmoji,\n  };\n}\n\nfunction getEmojiCode(html: string) {\n  const tempEl = document.createElement('div');\n  tempEl.innerHTML = html;\n  const text = tempEl.innerText;\n\n  const lastSymbol = text[text.length - 1];\n  const lastWord = text.split(RE_NOT_EMOJI_SEARCH).pop();\n\n  if (\n    !text.length || RE_NOT_EMOJI_SEARCH.test(lastSymbol)\n    || !lastWord || !lastWord.startsWith(':')\n  ) {\n    return undefined;\n  }\n\n  return lastWord.toLowerCase();\n}\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './EmojiTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const EmojiTooltip = useModuleLoader(Bundles.Extra, 'EmojiTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiTooltip ? <EmojiTooltip {...props} /> : undefined;\n};\n\nexport default memo(EmojiTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_EMOJI_SUPPORTED, IS_VOICE_RECORDING_SUPPORTED, IS_MOBILE_SCREEN } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatGroup,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  canSuggestMembers?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showError' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  canSuggestMembers,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  recentEmojis,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showError,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID) {\n      loadScheduledHistory();\n    }\n  }, [chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredMembers,\n  } = useMentionTooltip(\n    canSuggestMembers && !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        if (IS_EMOJI_SUPPORTED) {\n          // Insertion will trigger `onChange` in MessageInput, so no need to setHtml in state\n          document.execCommand('insertText', false, text);\n        } else {\n          insertHtmlInSelection(newHtml);\n          messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        }\n\n        return;\n      }\n\n      setHtml(`${htmlRef.current!}${newHtml}`);\n\n      if (!IS_MOBILE_SCREEN) {\n        // If selection is outside of input, set cursor at the end of input\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput);\n        });\n      }\n    } else {\n      setHtml(`${htmlRef.current!}${newHtml}`);\n    }\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_MOBILE_SCREEN) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showError({\n        error: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n        },\n      });\n      return;\n    }\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showError({\n            error: {\n              message: `A wait of ${secondsRemaining} seconds is required before sending another message in this chat`,\n              isSlowMode: true,\n            },\n          });\n\n          const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000);\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    activeVoiceRecording, attachments, connectionState, chatId, slowMode, isForwarding, isAdmin,\n    sendMessage, stopRecordingVoice, resetComposer, clearDraft, showError, forwardMessages,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000));\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_MOBILE_SCREEN || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_MOBILE_SCREEN) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const lang = useLang();\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'Send message';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Posting media content is not allowed in this group.'\n        : 'Record a voice message';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        canSuggestMembers={canSuggestMembers}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        onCaptionUpdate={setHtml}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredChatMembers={mentionFilteredMembers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_MOBILE_SCREEN ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              <Spinner color=\"gray\" />\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && window.innerWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSupressFocus={IS_MOBILE_SCREEN && isSymbolMenuOpen}\n            shouldSupressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen}\n            onUpdate={setHtml}\n            onSend={mainButtonState === MainButtonState.Edit\n              ? handleEditComplete\n              : (shouldSchedule ? openCalendar : handleSend)}\n            onSupressedFocus={closeSymbolMenu}\n          />\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={sendButtonAriaLabel}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      canSuggestMembers: chat && isChatGroup(chat),\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showError',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n} from '../../config';\nimport { IS_MOBILE_SCREEN, IS_TOUCH_ENV, MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  messageSendingRestrictionReason?: string;\n  hasPinnedOrAudioMessage?: boolean;\n  customBackground?: string;\n  patternColor?: string;\n  isCustomBackgroundColor?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'unpinAllMessages' | 'loadUser'>;\n\nconst CLOSE_ANIMATION_DURATION = IS_MOBILE_SCREEN ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.includes(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  messageSendingRestrictionReason,\n  hasPinnedOrAudioMessage,\n  customBackground,\n  patternColor,\n  isCustomBackgroundColor,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState(false);\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items).every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const customBackgroundValue = useCustomBackground(customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && !isCustomBackgroundColor && 'custom-bg-image',\n    customBackground && isCustomBackgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n      `}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n            />\n            <Transition\n              name={animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                  />\n                  <div className={buildClassName('middle-column-footer', !renderingCanPost && 'no-composer')}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\">\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.PanelHidePinnedMessages')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton isShown={isFabShown} />\n          </div>\n          {IS_MOBILE_SCREEN && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { isBackgroundBlurred, customBackground, patternColor } = global.settings.byKey;\n\n    const isCustomBackgroundColor = Boolean((customBackground || '').match(/^#[a-f\\d]{6,8}$/i));\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds } } = global;\n    if (!currentMessageList || !listIds.active) {\n      return {\n        customBackground,\n        isBackgroundBlurred,\n        isCustomBackgroundColor,\n      };\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n\n    return {\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_MOBILE_SCREEN),\n      isPinnedMessageList,\n      messageSendingRestrictionReason: chat && getMessageSendingRestrictionReason(chat),\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      customBackground,\n      patternColor,\n      isCustomBackgroundColor,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_MOBILE_SCREEN && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser',\n  ]),\n)(MiddleColumn));\n","import { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { useEffect, useState } from '../lib/teact/teact';\n\nexport default (settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, CUSTOM_BG_CACHE_NAME, cacheApi.Type.Blob)\n        .then((blob) => {\n          setValue(`url(${URL.createObjectURL(blob)}`);\n        });\n    }\n  }, [settingValue]);\n\n  return value;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_MOBILE_SCREEN } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal.async';\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'searchMessagesByDate'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  searchMessagesByDate,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeCalendar();\n  }, [closeCalendar, searchMessagesByDate]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={openCalendar}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder=\"Search Stickers\"\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_MOBILE_SCREEN\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    shouldSkipTransition && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n      {!IS_MOBILE_SCREEN && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          isPastMode\n          submitButtonLabel={lang('JumpToDate')}\n          onClose={closeCalendar}\n          onSubmit={handleJumpToDate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'searchMessagesByDate',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById);\n  }, [groupChatMembers, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\">{getUserStatus(user, lang)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\">\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\">\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3>{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3>{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const {\n    id: chatId,\n    isMuted: currentIsMuted,\n    username: chatUsername,\n  } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleClick = useCallback((text: string, entity: string) => {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }, [showNotification]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !currentIsMuted });\n  }, [chatId, currentIsMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  const bio = fullInfo && fullInfo.bio;\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const description = getChatDescription(chat);\n  const link = getChatLink(chat);\n  const url = link.indexOf('http') === 0 ? link : `http://${link}`;\n  const printedUsername = username || chatUsername;\n  const printedDescription = bio || description;\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => handleClick(formattedNumber, lang('Phone'))}>\n          <span className=\"title\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {printedUsername && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => handleClick(`@${printedUsername}`, lang('Username'))}\n        >\n          <span className=\"title\">{renderText(printedUsername)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {printedDescription && !!printedDescription.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          ripple\n          onClick={() => handleClick(printedDescription, lang(userId ? 'UserBio' : 'Info'))}\n        >\n          <span className=\"title\">{renderText(printedDescription, ['br', 'links', 'emoji'])}</span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {canInviteUsers && !printedUsername && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => handleClick(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">\n            <SafeLink url={url} className=\"title\" text={link} />\n          </div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={`${userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}`}\n          checked={!currentIsMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n\n    const canInviteUsers = chat && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  isChannel,\n  resolvedUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const [activeTab, setActiveTab] = useState(0);\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = 'No documents found.';\n          break;\n        case 'links':\n          text = 'No links found.';\n          break;\n        case 'audio':\n          text = 'No audio found.';\n          break;\n        default:\n          text = 'No media found.';\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div className={`content ${resultType}-list`} teactFastList>\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              renderingFor=\"sharedMedia\"\n              message={chatMessages[id]}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div className=\"shared-media\">\n          <Transition\n            ref={transitionRef}\n            name=\"slide\"\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState, RightColumnContent } from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' |\n  'closeLocalTextSearch' | 'closePollResults' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback(() => {\n    switch (contentKey) {\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo();\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n          />\n        );\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch />;\n      case RightColumnContent.PollResults:\n        return <PollResults />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n        />\n        <Transition\n          name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ErrorsAsync: FC = ({ isOpen }) => {\n  const Errors = useModuleLoader(Bundles.Extra, 'Errors', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Errors ? <Errors /> : undefined;\n};\n\nexport default memo(ErrorsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, useEffect, memo } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Errors from './Errors.async';\nimport ForwardPicker from './ForwardPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasErrors: boolean;\n  audioMessage?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadAnimatedEmojis'>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  loadAnimatedEmojis,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasErrors,\n  audioMessage,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAnimatedEmojis();\n    }\n  }, [lastSyncTime, loadAnimatedEmojis]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n  );\n\n  useEffect(() => {\n    // For animating Symbol Menu on mobile\n    document.body.classList.toggle('is-middle-column-open', className.includes('middle-column-open'));\n    // For animating components in portals (i.e. Notification)\n    document.body.classList.toggle('is-right-column-shown', className.includes('right-column-open'));\n  }, [className]);\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  useBackgroundMode(() => {\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, () => {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  });\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Errors isOpen={hasErrors} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasErrors: Boolean(global.errors.length),\n      audioMessage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadAnimatedEmojis']),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}